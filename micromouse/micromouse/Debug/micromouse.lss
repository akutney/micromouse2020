
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000239c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  0000239c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  20000068  00002404  00020068  2**2
                  ALLOC
  3 .stack        00002004  2000017c  00002518  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a455  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cb5  00000000  00000000  0004a53e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000048d4  00000000  00000000  0004e1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000530  00000000  00000000  00052ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005b0  00000000  00000000  00052ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007233  00000000  00000000  000535a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cbff  00000000  00000000  0005a7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089a25  00000000  00000000  000673d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001228  00000000  00000000  000f0e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 21 00 20 d5 14 00 00 d1 14 00 00 d1 14 00 00     .!. ............
	...
      2c:	d1 14 00 00 00 00 00 00 00 00 00 00 d1 14 00 00     ................
      3c:	d1 14 00 00 d1 14 00 00 d1 14 00 00 d1 14 00 00     ................
      4c:	d1 14 00 00 29 0d 00 00 d1 14 00 00 d1 14 00 00     ....)...........
      5c:	d1 14 00 00 d1 14 00 00 c9 0c 00 00 d9 0c 00 00     ................
      6c:	e9 0c 00 00 f9 0c 00 00 09 0d 00 00 19 0d 00 00     ................
      7c:	d1 14 00 00 d1 14 00 00 d1 14 00 00 55 03 00 00     ............U...
      8c:	65 03 00 00 75 03 00 00 00 00 00 00 00 00 00 00     e...u...........
      9c:	15 01 00 00 d1 14 00 00 d1 14 00 00 d1 14 00 00     ................
      ac:	d1 14 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	0000239c 	.word	0x0000239c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	0000239c 	.word	0x0000239c
     10c:	0000239c 	.word	0x0000239c
     110:	00000000 	.word	0x00000000

00000114 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     116:	4b2f      	ldr	r3, [pc, #188]	; (1d4 <ADC_Handler+0xc0>)
     118:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     11a:	682b      	ldr	r3, [r5, #0]
     11c:	7e1a      	ldrb	r2, [r3, #24]
     11e:	7ddc      	ldrb	r4, [r3, #23]
     120:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     122:	07e2      	lsls	r2, r4, #31
     124:	d416      	bmi.n	154 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     126:	0763      	lsls	r3, r4, #29
     128:	d508      	bpl.n	13c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     12a:	2304      	movs	r3, #4
     12c:	682a      	ldr	r2, [r5, #0]
     12e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     130:	7eeb      	ldrb	r3, [r5, #27]
     132:	079b      	lsls	r3, r3, #30
     134:	d502      	bpl.n	13c <ADC_Handler+0x28>
     136:	7eab      	ldrb	r3, [r5, #26]
     138:	079b      	lsls	r3, r3, #30
     13a:	d442      	bmi.n	1c2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     13c:	07a3      	lsls	r3, r4, #30
     13e:	d508      	bpl.n	152 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     140:	2302      	movs	r3, #2
     142:	682a      	ldr	r2, [r5, #0]
     144:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     146:	7eeb      	ldrb	r3, [r5, #27]
     148:	075b      	lsls	r3, r3, #29
     14a:	d502      	bpl.n	152 <ADC_Handler+0x3e>
     14c:	7eab      	ldrb	r3, [r5, #26]
     14e:	075b      	lsls	r3, r3, #29
     150:	d43b      	bmi.n	1ca <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     152:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     154:	2201      	movs	r2, #1
     156:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     158:	682a      	ldr	r2, [r5, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     15a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     15c:	b25b      	sxtb	r3, r3
     15e:	2b00      	cmp	r3, #0
     160:	dbfb      	blt.n	15a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     162:	6969      	ldr	r1, [r5, #20]
     164:	1c8b      	adds	r3, r1, #2
     166:	616b      	str	r3, [r5, #20]
     168:	8b53      	ldrh	r3, [r2, #26]
     16a:	b29b      	uxth	r3, r3
     16c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     16e:	8b2b      	ldrh	r3, [r5, #24]
     170:	3b01      	subs	r3, #1
     172:	b29b      	uxth	r3, r3
     174:	832b      	strh	r3, [r5, #24]
     176:	2b00      	cmp	r3, #0
     178:	d011      	beq.n	19e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     17a:	7f6b      	ldrb	r3, [r5, #29]
     17c:	2b00      	cmp	r3, #0
     17e:	d0d2      	beq.n	126 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     180:	682a      	ldr	r2, [r5, #0]
     182:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     184:	b25b      	sxtb	r3, r3
     186:	2b00      	cmp	r3, #0
     188:	dbfb      	blt.n	182 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     18a:	7b13      	ldrb	r3, [r2, #12]
     18c:	2102      	movs	r1, #2
     18e:	430b      	orrs	r3, r1
     190:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     192:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     194:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     196:	b25b      	sxtb	r3, r3
     198:	2b00      	cmp	r3, #0
     19a:	dbfb      	blt.n	194 <ADC_Handler+0x80>
     19c:	e7c3      	b.n	126 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     19e:	2301      	movs	r3, #1
     1a0:	682a      	ldr	r2, [r5, #0]
     1a2:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     1a4:	7f2b      	ldrb	r3, [r5, #28]
     1a6:	2b05      	cmp	r3, #5
     1a8:	d1bd      	bne.n	126 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     1aa:	2300      	movs	r3, #0
     1ac:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     1ae:	7eeb      	ldrb	r3, [r5, #27]
     1b0:	07db      	lsls	r3, r3, #31
     1b2:	d5b8      	bpl.n	126 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     1b4:	7eab      	ldrb	r3, [r5, #26]
     1b6:	07db      	lsls	r3, r3, #31
     1b8:	d5b5      	bpl.n	126 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     1ba:	0028      	movs	r0, r5
     1bc:	68ab      	ldr	r3, [r5, #8]
     1be:	4798      	blx	r3
     1c0:	e7b1      	b.n	126 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     1c2:	0028      	movs	r0, r5
     1c4:	68eb      	ldr	r3, [r5, #12]
     1c6:	4798      	blx	r3
     1c8:	e7b8      	b.n	13c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1ca:	692b      	ldr	r3, [r5, #16]
     1cc:	0028      	movs	r0, r5
     1ce:	4798      	blx	r3
}
     1d0:	e7bf      	b.n	152 <ADC_Handler+0x3e>
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	200000cc 	.word	0x200000cc

000001d8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     1d8:	4a04      	ldr	r2, [pc, #16]	; (1ec <_extint_enable+0x14>)
     1da:	7813      	ldrb	r3, [r2, #0]
     1dc:	2102      	movs	r1, #2
     1de:	430b      	orrs	r3, r1
     1e0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     1e2:	7853      	ldrb	r3, [r2, #1]
     1e4:	b25b      	sxtb	r3, r3
     1e6:	2b00      	cmp	r3, #0
     1e8:	dbfb      	blt.n	1e2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     1ea:	4770      	bx	lr
     1ec:	40001800 	.word	0x40001800

000001f0 <_system_extint_init>:
{
     1f0:	b500      	push	{lr}
     1f2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     1f4:	4a12      	ldr	r2, [pc, #72]	; (240 <_system_extint_init+0x50>)
     1f6:	6993      	ldr	r3, [r2, #24]
     1f8:	2140      	movs	r1, #64	; 0x40
     1fa:	430b      	orrs	r3, r1
     1fc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     1fe:	a901      	add	r1, sp, #4
     200:	2300      	movs	r3, #0
     202:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     204:	2005      	movs	r0, #5
     206:	4b0f      	ldr	r3, [pc, #60]	; (244 <_system_extint_init+0x54>)
     208:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     20a:	2005      	movs	r0, #5
     20c:	4b0e      	ldr	r3, [pc, #56]	; (248 <_system_extint_init+0x58>)
     20e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     210:	4a0e      	ldr	r2, [pc, #56]	; (24c <_system_extint_init+0x5c>)
     212:	7813      	ldrb	r3, [r2, #0]
     214:	2101      	movs	r1, #1
     216:	430b      	orrs	r3, r1
     218:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     21a:	7853      	ldrb	r3, [r2, #1]
     21c:	b25b      	sxtb	r3, r3
     21e:	2b00      	cmp	r3, #0
     220:	dbfb      	blt.n	21a <_system_extint_init+0x2a>
     222:	4b0b      	ldr	r3, [pc, #44]	; (250 <_system_extint_init+0x60>)
     224:	0019      	movs	r1, r3
     226:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     228:	2200      	movs	r2, #0
     22a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     22c:	4299      	cmp	r1, r3
     22e:	d1fc      	bne.n	22a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     230:	2210      	movs	r2, #16
     232:	4b08      	ldr	r3, [pc, #32]	; (254 <_system_extint_init+0x64>)
     234:	601a      	str	r2, [r3, #0]
	_extint_enable();
     236:	4b08      	ldr	r3, [pc, #32]	; (258 <_system_extint_init+0x68>)
     238:	4798      	blx	r3
}
     23a:	b003      	add	sp, #12
     23c:	bd00      	pop	{pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	40000400 	.word	0x40000400
     244:	00001379 	.word	0x00001379
     248:	000012ed 	.word	0x000012ed
     24c:	40001800 	.word	0x40001800
     250:	200000d0 	.word	0x200000d0
     254:	e000e100 	.word	0xe000e100
     258:	000001d9 	.word	0x000001d9

0000025c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     25c:	b5f0      	push	{r4, r5, r6, r7, lr}
     25e:	46c6      	mov	lr, r8
     260:	b500      	push	{lr}
     262:	000c      	movs	r4, r1
     264:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     266:	2800      	cmp	r0, #0
     268:	d10f      	bne.n	28a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     26a:	2a00      	cmp	r2, #0
     26c:	dd11      	ble.n	292 <_read+0x36>
     26e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     270:	4e09      	ldr	r6, [pc, #36]	; (298 <_read+0x3c>)
     272:	4d0a      	ldr	r5, [pc, #40]	; (29c <_read+0x40>)
     274:	6830      	ldr	r0, [r6, #0]
     276:	0021      	movs	r1, r4
     278:	682b      	ldr	r3, [r5, #0]
     27a:	4798      	blx	r3
		ptr++;
     27c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     27e:	42bc      	cmp	r4, r7
     280:	d1f8      	bne.n	274 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     282:	4640      	mov	r0, r8
     284:	bc04      	pop	{r2}
     286:	4690      	mov	r8, r2
     288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     28a:	2301      	movs	r3, #1
     28c:	425b      	negs	r3, r3
     28e:	4698      	mov	r8, r3
     290:	e7f7      	b.n	282 <_read+0x26>
	for (; len > 0; --len) {
     292:	4680      	mov	r8, r0
     294:	e7f5      	b.n	282 <_read+0x26>
     296:	46c0      	nop			; (mov r8, r8)
     298:	20000118 	.word	0x20000118
     29c:	20000110 	.word	0x20000110

000002a0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2a2:	46c6      	mov	lr, r8
     2a4:	b500      	push	{lr}
     2a6:	000e      	movs	r6, r1
     2a8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     2aa:	3801      	subs	r0, #1
     2ac:	2802      	cmp	r0, #2
     2ae:	d810      	bhi.n	2d2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     2b0:	2a00      	cmp	r2, #0
     2b2:	d011      	beq.n	2d8 <_write+0x38>
     2b4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     2b6:	4b0c      	ldr	r3, [pc, #48]	; (2e8 <_write+0x48>)
     2b8:	4698      	mov	r8, r3
     2ba:	4f0c      	ldr	r7, [pc, #48]	; (2ec <_write+0x4c>)
     2bc:	4643      	mov	r3, r8
     2be:	6818      	ldr	r0, [r3, #0]
     2c0:	5d31      	ldrb	r1, [r6, r4]
     2c2:	683b      	ldr	r3, [r7, #0]
     2c4:	4798      	blx	r3
     2c6:	2800      	cmp	r0, #0
     2c8:	db08      	blt.n	2dc <_write+0x3c>
			return -1;
		}
		++nChars;
     2ca:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     2cc:	42a5      	cmp	r5, r4
     2ce:	d1f5      	bne.n	2bc <_write+0x1c>
     2d0:	e006      	b.n	2e0 <_write+0x40>
		return -1;
     2d2:	2401      	movs	r4, #1
     2d4:	4264      	negs	r4, r4
     2d6:	e003      	b.n	2e0 <_write+0x40>
	for (; len != 0; --len) {
     2d8:	0014      	movs	r4, r2
     2da:	e001      	b.n	2e0 <_write+0x40>
			return -1;
     2dc:	2401      	movs	r4, #1
     2de:	4264      	negs	r4, r4
	}
	return nChars;
}
     2e0:	0020      	movs	r0, r4
     2e2:	bc04      	pop	{r2}
     2e4:	4690      	mov	r8, r2
     2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2e8:	20000118 	.word	0x20000118
     2ec:	20000114 	.word	0x20000114

000002f0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     2f0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     2f2:	0080      	lsls	r0, r0, #2
     2f4:	4b16      	ldr	r3, [pc, #88]	; (350 <_tc_interrupt_handler+0x60>)
     2f6:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     2f8:	6823      	ldr	r3, [r4, #0]
     2fa:	7b9d      	ldrb	r5, [r3, #14]
     2fc:	7e22      	ldrb	r2, [r4, #24]
     2fe:	7e63      	ldrb	r3, [r4, #25]
     300:	4013      	ands	r3, r2
     302:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     304:	07eb      	lsls	r3, r5, #31
     306:	d406      	bmi.n	316 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     308:	07ab      	lsls	r3, r5, #30
     30a:	d40b      	bmi.n	324 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     30c:	06eb      	lsls	r3, r5, #27
     30e:	d410      	bmi.n	332 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     310:	06ab      	lsls	r3, r5, #26
     312:	d415      	bmi.n	340 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     314:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     316:	0020      	movs	r0, r4
     318:	68a3      	ldr	r3, [r4, #8]
     31a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     31c:	2301      	movs	r3, #1
     31e:	6822      	ldr	r2, [r4, #0]
     320:	7393      	strb	r3, [r2, #14]
     322:	e7f1      	b.n	308 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     324:	0020      	movs	r0, r4
     326:	68e3      	ldr	r3, [r4, #12]
     328:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     32a:	2302      	movs	r3, #2
     32c:	6822      	ldr	r2, [r4, #0]
     32e:	7393      	strb	r3, [r2, #14]
     330:	e7ec      	b.n	30c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     332:	0020      	movs	r0, r4
     334:	6923      	ldr	r3, [r4, #16]
     336:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     338:	2310      	movs	r3, #16
     33a:	6822      	ldr	r2, [r4, #0]
     33c:	7393      	strb	r3, [r2, #14]
     33e:	e7e7      	b.n	310 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     340:	0020      	movs	r0, r4
     342:	6963      	ldr	r3, [r4, #20]
     344:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     346:	6823      	ldr	r3, [r4, #0]
     348:	2220      	movs	r2, #32
     34a:	739a      	strb	r2, [r3, #14]
}
     34c:	e7e2      	b.n	314 <_tc_interrupt_handler+0x24>
     34e:	46c0      	nop			; (mov r8, r8)
     350:	2000011c 	.word	0x2000011c

00000354 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     354:	b510      	push	{r4, lr}
     356:	2000      	movs	r0, #0
     358:	4b01      	ldr	r3, [pc, #4]	; (360 <TC3_Handler+0xc>)
     35a:	4798      	blx	r3
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	000002f1 	.word	0x000002f1

00000364 <TC4_Handler>:
     364:	b510      	push	{r4, lr}
     366:	2001      	movs	r0, #1
     368:	4b01      	ldr	r3, [pc, #4]	; (370 <TC4_Handler+0xc>)
     36a:	4798      	blx	r3
     36c:	bd10      	pop	{r4, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	000002f1 	.word	0x000002f1

00000374 <TC5_Handler>:
     374:	b510      	push	{r4, lr}
     376:	2002      	movs	r0, #2
     378:	4b01      	ldr	r3, [pc, #4]	; (380 <TC5_Handler+0xc>)
     37a:	4798      	blx	r3
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	000002f1 	.word	0x000002f1

00000384 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     384:	b5f0      	push	{r4, r5, r6, r7, lr}
     386:	46de      	mov	lr, fp
     388:	4657      	mov	r7, sl
     38a:	464e      	mov	r6, r9
     38c:	4645      	mov	r5, r8
     38e:	b5e0      	push	{r5, r6, r7, lr}
     390:	b091      	sub	sp, #68	; 0x44
     392:	0005      	movs	r5, r0
     394:	000c      	movs	r4, r1
     396:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     398:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     39a:	0008      	movs	r0, r1
     39c:	4bba      	ldr	r3, [pc, #744]	; (688 <usart_init+0x304>)
     39e:	4798      	blx	r3
     3a0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     3a2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     3a4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     3a6:	07db      	lsls	r3, r3, #31
     3a8:	d506      	bpl.n	3b8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     3aa:	b011      	add	sp, #68	; 0x44
     3ac:	bc3c      	pop	{r2, r3, r4, r5}
     3ae:	4690      	mov	r8, r2
     3b0:	4699      	mov	r9, r3
     3b2:	46a2      	mov	sl, r4
     3b4:	46ab      	mov	fp, r5
     3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     3b8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     3ba:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     3bc:	079b      	lsls	r3, r3, #30
     3be:	d4f4      	bmi.n	3aa <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3c0:	49b2      	ldr	r1, [pc, #712]	; (68c <usart_init+0x308>)
     3c2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     3c4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     3c6:	2301      	movs	r3, #1
     3c8:	40bb      	lsls	r3, r7
     3ca:	4303      	orrs	r3, r0
     3cc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     3ce:	a90f      	add	r1, sp, #60	; 0x3c
     3d0:	272d      	movs	r7, #45	; 0x2d
     3d2:	5df3      	ldrb	r3, [r6, r7]
     3d4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     3d6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     3d8:	b2d3      	uxtb	r3, r2
     3da:	9302      	str	r3, [sp, #8]
     3dc:	0018      	movs	r0, r3
     3de:	4bac      	ldr	r3, [pc, #688]	; (690 <usart_init+0x30c>)
     3e0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     3e2:	9802      	ldr	r0, [sp, #8]
     3e4:	4bab      	ldr	r3, [pc, #684]	; (694 <usart_init+0x310>)
     3e6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     3e8:	5df0      	ldrb	r0, [r6, r7]
     3ea:	2100      	movs	r1, #0
     3ec:	4baa      	ldr	r3, [pc, #680]	; (698 <usart_init+0x314>)
     3ee:	4798      	blx	r3
	module->character_size = config->character_size;
     3f0:	7af3      	ldrb	r3, [r6, #11]
     3f2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     3f4:	2324      	movs	r3, #36	; 0x24
     3f6:	5cf3      	ldrb	r3, [r6, r3]
     3f8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     3fa:	2325      	movs	r3, #37	; 0x25
     3fc:	5cf3      	ldrb	r3, [r6, r3]
     3fe:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     400:	7ef3      	ldrb	r3, [r6, #27]
     402:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     404:	7f33      	ldrb	r3, [r6, #28]
     406:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     408:	682b      	ldr	r3, [r5, #0]
     40a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     40c:	0018      	movs	r0, r3
     40e:	4b9e      	ldr	r3, [pc, #632]	; (688 <usart_init+0x304>)
     410:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     412:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     414:	2200      	movs	r2, #0
     416:	230e      	movs	r3, #14
     418:	a906      	add	r1, sp, #24
     41a:	468c      	mov	ip, r1
     41c:	4463      	add	r3, ip
     41e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     420:	8a32      	ldrh	r2, [r6, #16]
     422:	9202      	str	r2, [sp, #8]
     424:	2380      	movs	r3, #128	; 0x80
     426:	01db      	lsls	r3, r3, #7
     428:	429a      	cmp	r2, r3
     42a:	d100      	bne.n	42e <usart_init+0xaa>
     42c:	e09a      	b.n	564 <usart_init+0x1e0>
     42e:	d90f      	bls.n	450 <usart_init+0xcc>
     430:	23c0      	movs	r3, #192	; 0xc0
     432:	01db      	lsls	r3, r3, #7
     434:	9a02      	ldr	r2, [sp, #8]
     436:	429a      	cmp	r2, r3
     438:	d100      	bne.n	43c <usart_init+0xb8>
     43a:	e08e      	b.n	55a <usart_init+0x1d6>
     43c:	2380      	movs	r3, #128	; 0x80
     43e:	021b      	lsls	r3, r3, #8
     440:	429a      	cmp	r2, r3
     442:	d000      	beq.n	446 <usart_init+0xc2>
     444:	e11b      	b.n	67e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     446:	2303      	movs	r3, #3
     448:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     44a:	2300      	movs	r3, #0
     44c:	9307      	str	r3, [sp, #28]
     44e:	e008      	b.n	462 <usart_init+0xde>
	switch (config->sample_rate) {
     450:	2380      	movs	r3, #128	; 0x80
     452:	019b      	lsls	r3, r3, #6
     454:	429a      	cmp	r2, r3
     456:	d000      	beq.n	45a <usart_init+0xd6>
     458:	e111      	b.n	67e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     45a:	2310      	movs	r3, #16
     45c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     45e:	3b0f      	subs	r3, #15
     460:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     462:	6833      	ldr	r3, [r6, #0]
     464:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     466:	68f3      	ldr	r3, [r6, #12]
     468:	469b      	mov	fp, r3
		config->sample_adjustment |
     46a:	6973      	ldr	r3, [r6, #20]
     46c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     46e:	7e33      	ldrb	r3, [r6, #24]
     470:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     472:	2326      	movs	r3, #38	; 0x26
     474:	5cf3      	ldrb	r3, [r6, r3]
     476:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     478:	6873      	ldr	r3, [r6, #4]
     47a:	4699      	mov	r9, r3
	switch (transfer_mode)
     47c:	2b00      	cmp	r3, #0
     47e:	d100      	bne.n	482 <usart_init+0xfe>
     480:	e09c      	b.n	5bc <usart_init+0x238>
     482:	2380      	movs	r3, #128	; 0x80
     484:	055b      	lsls	r3, r3, #21
     486:	4599      	cmp	r9, r3
     488:	d100      	bne.n	48c <usart_init+0x108>
     48a:	e080      	b.n	58e <usart_init+0x20a>
	if(config->encoding_format_enable) {
     48c:	7e73      	ldrb	r3, [r6, #25]
     48e:	2b00      	cmp	r3, #0
     490:	d002      	beq.n	498 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     492:	7eb3      	ldrb	r3, [r6, #26]
     494:	4642      	mov	r2, r8
     496:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     498:	230e      	movs	r3, #14
     49a:	aa06      	add	r2, sp, #24
     49c:	4694      	mov	ip, r2
     49e:	4463      	add	r3, ip
     4a0:	881b      	ldrh	r3, [r3, #0]
     4a2:	4642      	mov	r2, r8
     4a4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     4a6:	9b05      	ldr	r3, [sp, #20]
     4a8:	465a      	mov	r2, fp
     4aa:	4313      	orrs	r3, r2
     4ac:	9a03      	ldr	r2, [sp, #12]
     4ae:	4313      	orrs	r3, r2
     4b0:	464a      	mov	r2, r9
     4b2:	4313      	orrs	r3, r2
     4b4:	9f02      	ldr	r7, [sp, #8]
     4b6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     4b8:	9b04      	ldr	r3, [sp, #16]
     4ba:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     4bc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     4be:	4653      	mov	r3, sl
     4c0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     4c2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     4c4:	2327      	movs	r3, #39	; 0x27
     4c6:	5cf3      	ldrb	r3, [r6, r3]
     4c8:	2b00      	cmp	r3, #0
     4ca:	d101      	bne.n	4d0 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     4cc:	3304      	adds	r3, #4
     4ce:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     4d0:	7e73      	ldrb	r3, [r6, #25]
     4d2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     4d4:	7f32      	ldrb	r2, [r6, #28]
     4d6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     4d8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     4da:	7f72      	ldrb	r2, [r6, #29]
     4dc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     4de:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     4e0:	2224      	movs	r2, #36	; 0x24
     4e2:	5cb2      	ldrb	r2, [r6, r2]
     4e4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     4e6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     4e8:	2225      	movs	r2, #37	; 0x25
     4ea:	5cb2      	ldrb	r2, [r6, r2]
     4ec:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     4ee:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     4f0:	7ab1      	ldrb	r1, [r6, #10]
     4f2:	7af2      	ldrb	r2, [r6, #11]
     4f4:	4311      	orrs	r1, r2
     4f6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     4f8:	8933      	ldrh	r3, [r6, #8]
     4fa:	2bff      	cmp	r3, #255	; 0xff
     4fc:	d100      	bne.n	500 <usart_init+0x17c>
     4fe:	e081      	b.n	604 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     500:	2280      	movs	r2, #128	; 0x80
     502:	0452      	lsls	r2, r2, #17
     504:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     506:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     508:	232c      	movs	r3, #44	; 0x2c
     50a:	5cf3      	ldrb	r3, [r6, r3]
     50c:	2b00      	cmp	r3, #0
     50e:	d103      	bne.n	518 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     510:	4b62      	ldr	r3, [pc, #392]	; (69c <usart_init+0x318>)
     512:	789b      	ldrb	r3, [r3, #2]
     514:	079b      	lsls	r3, r3, #30
     516:	d501      	bpl.n	51c <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     518:	2380      	movs	r3, #128	; 0x80
     51a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     51c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     51e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     520:	2b00      	cmp	r3, #0
     522:	d1fc      	bne.n	51e <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     524:	4643      	mov	r3, r8
     526:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     528:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     52a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     52c:	2b00      	cmp	r3, #0
     52e:	d1fc      	bne.n	52a <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     530:	4643      	mov	r3, r8
     532:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     534:	ab0e      	add	r3, sp, #56	; 0x38
     536:	2280      	movs	r2, #128	; 0x80
     538:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     53a:	2200      	movs	r2, #0
     53c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     53e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     540:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     542:	6b33      	ldr	r3, [r6, #48]	; 0x30
     544:	930a      	str	r3, [sp, #40]	; 0x28
     546:	6b73      	ldr	r3, [r6, #52]	; 0x34
     548:	930b      	str	r3, [sp, #44]	; 0x2c
     54a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     54c:	930c      	str	r3, [sp, #48]	; 0x30
     54e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     550:	9302      	str	r3, [sp, #8]
     552:	930d      	str	r3, [sp, #52]	; 0x34
     554:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     556:	ae0a      	add	r6, sp, #40	; 0x28
     558:	e063      	b.n	622 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     55a:	2308      	movs	r3, #8
     55c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     55e:	3b07      	subs	r3, #7
     560:	9307      	str	r3, [sp, #28]
     562:	e77e      	b.n	462 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     564:	6833      	ldr	r3, [r6, #0]
     566:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     568:	68f3      	ldr	r3, [r6, #12]
     56a:	469b      	mov	fp, r3
		config->sample_adjustment |
     56c:	6973      	ldr	r3, [r6, #20]
     56e:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     570:	7e33      	ldrb	r3, [r6, #24]
     572:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     574:	2326      	movs	r3, #38	; 0x26
     576:	5cf3      	ldrb	r3, [r6, r3]
     578:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     57a:	6873      	ldr	r3, [r6, #4]
     57c:	4699      	mov	r9, r3
	switch (transfer_mode)
     57e:	2b00      	cmp	r3, #0
     580:	d018      	beq.n	5b4 <usart_init+0x230>
     582:	2380      	movs	r3, #128	; 0x80
     584:	055b      	lsls	r3, r3, #21
     586:	4599      	cmp	r9, r3
     588:	d001      	beq.n	58e <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     58a:	2000      	movs	r0, #0
     58c:	e025      	b.n	5da <usart_init+0x256>
			if (!config->use_external_clock) {
     58e:	2327      	movs	r3, #39	; 0x27
     590:	5cf3      	ldrb	r3, [r6, r3]
     592:	2b00      	cmp	r3, #0
     594:	d000      	beq.n	598 <usart_init+0x214>
     596:	e779      	b.n	48c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     598:	6a33      	ldr	r3, [r6, #32]
     59a:	001f      	movs	r7, r3
     59c:	b2c0      	uxtb	r0, r0
     59e:	4b40      	ldr	r3, [pc, #256]	; (6a0 <usart_init+0x31c>)
     5a0:	4798      	blx	r3
     5a2:	0001      	movs	r1, r0
     5a4:	220e      	movs	r2, #14
     5a6:	ab06      	add	r3, sp, #24
     5a8:	469c      	mov	ip, r3
     5aa:	4462      	add	r2, ip
     5ac:	0038      	movs	r0, r7
     5ae:	4b3d      	ldr	r3, [pc, #244]	; (6a4 <usart_init+0x320>)
     5b0:	4798      	blx	r3
     5b2:	e012      	b.n	5da <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     5b4:	2308      	movs	r3, #8
     5b6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     5b8:	2300      	movs	r3, #0
     5ba:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     5bc:	2327      	movs	r3, #39	; 0x27
     5be:	5cf3      	ldrb	r3, [r6, r3]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d00e      	beq.n	5e2 <usart_init+0x25e>
				status_code =
     5c4:	9b06      	ldr	r3, [sp, #24]
     5c6:	9300      	str	r3, [sp, #0]
     5c8:	9b07      	ldr	r3, [sp, #28]
     5ca:	220e      	movs	r2, #14
     5cc:	a906      	add	r1, sp, #24
     5ce:	468c      	mov	ip, r1
     5d0:	4462      	add	r2, ip
     5d2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     5d4:	6a30      	ldr	r0, [r6, #32]
     5d6:	4f34      	ldr	r7, [pc, #208]	; (6a8 <usart_init+0x324>)
     5d8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     5da:	2800      	cmp	r0, #0
     5dc:	d000      	beq.n	5e0 <usart_init+0x25c>
     5de:	e6e4      	b.n	3aa <usart_init+0x26>
     5e0:	e754      	b.n	48c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     5e2:	6a33      	ldr	r3, [r6, #32]
     5e4:	001f      	movs	r7, r3
     5e6:	b2c0      	uxtb	r0, r0
     5e8:	4b2d      	ldr	r3, [pc, #180]	; (6a0 <usart_init+0x31c>)
     5ea:	4798      	blx	r3
     5ec:	0001      	movs	r1, r0
				status_code =
     5ee:	9b06      	ldr	r3, [sp, #24]
     5f0:	9300      	str	r3, [sp, #0]
     5f2:	9b07      	ldr	r3, [sp, #28]
     5f4:	220e      	movs	r2, #14
     5f6:	a806      	add	r0, sp, #24
     5f8:	4684      	mov	ip, r0
     5fa:	4462      	add	r2, ip
     5fc:	0038      	movs	r0, r7
     5fe:	4f2a      	ldr	r7, [pc, #168]	; (6a8 <usart_init+0x324>)
     600:	47b8      	blx	r7
     602:	e7ea      	b.n	5da <usart_init+0x256>
		if(config->lin_slave_enable) {
     604:	7ef3      	ldrb	r3, [r6, #27]
     606:	2b00      	cmp	r3, #0
     608:	d100      	bne.n	60c <usart_init+0x288>
     60a:	e77d      	b.n	508 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     60c:	2380      	movs	r3, #128	; 0x80
     60e:	04db      	lsls	r3, r3, #19
     610:	431f      	orrs	r7, r3
     612:	e779      	b.n	508 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     614:	0020      	movs	r0, r4
     616:	4b25      	ldr	r3, [pc, #148]	; (6ac <usart_init+0x328>)
     618:	4798      	blx	r3
     61a:	e007      	b.n	62c <usart_init+0x2a8>
     61c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     61e:	2f04      	cmp	r7, #4
     620:	d00d      	beq.n	63e <usart_init+0x2ba>
     622:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     624:	00bb      	lsls	r3, r7, #2
     626:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     628:	2800      	cmp	r0, #0
     62a:	d0f3      	beq.n	614 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     62c:	1c43      	adds	r3, r0, #1
     62e:	d0f5      	beq.n	61c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     630:	a90e      	add	r1, sp, #56	; 0x38
     632:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     634:	0c00      	lsrs	r0, r0, #16
     636:	b2c0      	uxtb	r0, r0
     638:	4b1d      	ldr	r3, [pc, #116]	; (6b0 <usart_init+0x32c>)
     63a:	4798      	blx	r3
     63c:	e7ee      	b.n	61c <usart_init+0x298>
		module->callback[i]            = NULL;
     63e:	2300      	movs	r3, #0
     640:	60eb      	str	r3, [r5, #12]
     642:	612b      	str	r3, [r5, #16]
     644:	616b      	str	r3, [r5, #20]
     646:	61ab      	str	r3, [r5, #24]
     648:	61eb      	str	r3, [r5, #28]
     64a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     64c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     64e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     650:	2200      	movs	r2, #0
     652:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     654:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     656:	3330      	adds	r3, #48	; 0x30
     658:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     65a:	3301      	adds	r3, #1
     65c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     65e:	3301      	adds	r3, #1
     660:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     662:	3301      	adds	r3, #1
     664:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     666:	6828      	ldr	r0, [r5, #0]
     668:	4b07      	ldr	r3, [pc, #28]	; (688 <usart_init+0x304>)
     66a:	4798      	blx	r3
     66c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     66e:	4911      	ldr	r1, [pc, #68]	; (6b4 <usart_init+0x330>)
     670:	4b11      	ldr	r3, [pc, #68]	; (6b8 <usart_init+0x334>)
     672:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     674:	00a4      	lsls	r4, r4, #2
     676:	4b11      	ldr	r3, [pc, #68]	; (6bc <usart_init+0x338>)
     678:	50e5      	str	r5, [r4, r3]
	return status_code;
     67a:	2000      	movs	r0, #0
     67c:	e695      	b.n	3aa <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     67e:	2310      	movs	r3, #16
     680:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     682:	2300      	movs	r3, #0
     684:	9307      	str	r3, [sp, #28]
     686:	e6ec      	b.n	462 <usart_init+0xde>
     688:	00000c21 	.word	0x00000c21
     68c:	40000400 	.word	0x40000400
     690:	00001379 	.word	0x00001379
     694:	000012ed 	.word	0x000012ed
     698:	00000a5d 	.word	0x00000a5d
     69c:	41002000 	.word	0x41002000
     6a0:	00001395 	.word	0x00001395
     6a4:	0000099f 	.word	0x0000099f
     6a8:	000009c9 	.word	0x000009c9
     6ac:	00000aa9 	.word	0x00000aa9
     6b0:	00001471 	.word	0x00001471
     6b4:	00000751 	.word	0x00000751
     6b8:	00000c5d 	.word	0x00000c5d
     6bc:	20000128 	.word	0x20000128

000006c0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     6c0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     6c2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     6c4:	2a00      	cmp	r2, #0
     6c6:	d101      	bne.n	6cc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     6c8:	0018      	movs	r0, r3
     6ca:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     6cc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     6ce:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     6d0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     6d2:	2a00      	cmp	r2, #0
     6d4:	d1f8      	bne.n	6c8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     6d6:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     6d8:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     6da:	2102      	movs	r1, #2
     6dc:	7e13      	ldrb	r3, [r2, #24]
     6de:	420b      	tst	r3, r1
     6e0:	d0fc      	beq.n	6dc <usart_write_wait+0x1c>
	return STATUS_OK;
     6e2:	2300      	movs	r3, #0
     6e4:	e7f0      	b.n	6c8 <usart_write_wait+0x8>

000006e6 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     6e6:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     6e8:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     6ea:	2a00      	cmp	r2, #0
     6ec:	d101      	bne.n	6f2 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     6ee:	0018      	movs	r0, r3
     6f0:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     6f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     6f4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     6f6:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     6f8:	2a00      	cmp	r2, #0
     6fa:	d1f8      	bne.n	6ee <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     6fc:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     6fe:	7e10      	ldrb	r0, [r2, #24]
     700:	0740      	lsls	r0, r0, #29
     702:	d5f4      	bpl.n	6ee <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     704:	8b53      	ldrh	r3, [r2, #26]
     706:	b2db      	uxtb	r3, r3
	if (error_code) {
     708:	0698      	lsls	r0, r3, #26
     70a:	d01d      	beq.n	748 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     70c:	0798      	lsls	r0, r3, #30
     70e:	d503      	bpl.n	718 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     710:	2302      	movs	r3, #2
     712:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     714:	3318      	adds	r3, #24
     716:	e7ea      	b.n	6ee <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     718:	0758      	lsls	r0, r3, #29
     71a:	d503      	bpl.n	724 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     71c:	2304      	movs	r3, #4
     71e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     720:	331a      	adds	r3, #26
     722:	e7e4      	b.n	6ee <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     724:	07d8      	lsls	r0, r3, #31
     726:	d503      	bpl.n	730 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     728:	2301      	movs	r3, #1
     72a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     72c:	3312      	adds	r3, #18
     72e:	e7de      	b.n	6ee <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     730:	06d8      	lsls	r0, r3, #27
     732:	d503      	bpl.n	73c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     734:	2310      	movs	r3, #16
     736:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     738:	3332      	adds	r3, #50	; 0x32
     73a:	e7d8      	b.n	6ee <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     73c:	069b      	lsls	r3, r3, #26
     73e:	d503      	bpl.n	748 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     740:	2320      	movs	r3, #32
     742:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     744:	3321      	adds	r3, #33	; 0x21
     746:	e7d2      	b.n	6ee <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     748:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     74a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     74c:	2300      	movs	r3, #0
     74e:	e7ce      	b.n	6ee <usart_read_wait+0x8>

00000750 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     752:	0080      	lsls	r0, r0, #2
     754:	4b62      	ldr	r3, [pc, #392]	; (8e0 <_usart_interrupt_handler+0x190>)
     756:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     758:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     75a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     75c:	2b00      	cmp	r3, #0
     75e:	d1fc      	bne.n	75a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     760:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     762:	7da6      	ldrb	r6, [r4, #22]
     764:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     766:	2330      	movs	r3, #48	; 0x30
     768:	5ceb      	ldrb	r3, [r5, r3]
     76a:	2231      	movs	r2, #49	; 0x31
     76c:	5caf      	ldrb	r7, [r5, r2]
     76e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     770:	07f3      	lsls	r3, r6, #31
     772:	d522      	bpl.n	7ba <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     774:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     776:	b29b      	uxth	r3, r3
     778:	2b00      	cmp	r3, #0
     77a:	d01c      	beq.n	7b6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     77c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     77e:	7813      	ldrb	r3, [r2, #0]
     780:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     782:	1c51      	adds	r1, r2, #1
     784:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     786:	7969      	ldrb	r1, [r5, #5]
     788:	2901      	cmp	r1, #1
     78a:	d00e      	beq.n	7aa <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     78c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     78e:	05db      	lsls	r3, r3, #23
     790:	0ddb      	lsrs	r3, r3, #23
     792:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     794:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     796:	3b01      	subs	r3, #1
     798:	b29b      	uxth	r3, r3
     79a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     79c:	2b00      	cmp	r3, #0
     79e:	d10c      	bne.n	7ba <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     7a0:	3301      	adds	r3, #1
     7a2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     7a4:	3301      	adds	r3, #1
     7a6:	75a3      	strb	r3, [r4, #22]
     7a8:	e007      	b.n	7ba <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     7aa:	7851      	ldrb	r1, [r2, #1]
     7ac:	0209      	lsls	r1, r1, #8
     7ae:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     7b0:	3202      	adds	r2, #2
     7b2:	62aa      	str	r2, [r5, #40]	; 0x28
     7b4:	e7eb      	b.n	78e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     7b6:	2301      	movs	r3, #1
     7b8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     7ba:	07b3      	lsls	r3, r6, #30
     7bc:	d506      	bpl.n	7cc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     7be:	2302      	movs	r3, #2
     7c0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     7c2:	2200      	movs	r2, #0
     7c4:	3331      	adds	r3, #49	; 0x31
     7c6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     7c8:	07fb      	lsls	r3, r7, #31
     7ca:	d41a      	bmi.n	802 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     7cc:	0773      	lsls	r3, r6, #29
     7ce:	d565      	bpl.n	89c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     7d0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     7d2:	b29b      	uxth	r3, r3
     7d4:	2b00      	cmp	r3, #0
     7d6:	d05f      	beq.n	898 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     7d8:	8b63      	ldrh	r3, [r4, #26]
     7da:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     7dc:	071a      	lsls	r2, r3, #28
     7de:	d414      	bmi.n	80a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     7e0:	223f      	movs	r2, #63	; 0x3f
     7e2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     7e4:	2b00      	cmp	r3, #0
     7e6:	d034      	beq.n	852 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     7e8:	079a      	lsls	r2, r3, #30
     7ea:	d511      	bpl.n	810 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     7ec:	221a      	movs	r2, #26
     7ee:	2332      	movs	r3, #50	; 0x32
     7f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     7f2:	3b30      	subs	r3, #48	; 0x30
     7f4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     7f6:	077b      	lsls	r3, r7, #29
     7f8:	d550      	bpl.n	89c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     7fa:	0028      	movs	r0, r5
     7fc:	696b      	ldr	r3, [r5, #20]
     7fe:	4798      	blx	r3
     800:	e04c      	b.n	89c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     802:	0028      	movs	r0, r5
     804:	68eb      	ldr	r3, [r5, #12]
     806:	4798      	blx	r3
     808:	e7e0      	b.n	7cc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     80a:	2237      	movs	r2, #55	; 0x37
     80c:	4013      	ands	r3, r2
     80e:	e7e9      	b.n	7e4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     810:	075a      	lsls	r2, r3, #29
     812:	d505      	bpl.n	820 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     814:	221e      	movs	r2, #30
     816:	2332      	movs	r3, #50	; 0x32
     818:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     81a:	3b2e      	subs	r3, #46	; 0x2e
     81c:	8363      	strh	r3, [r4, #26]
     81e:	e7ea      	b.n	7f6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     820:	07da      	lsls	r2, r3, #31
     822:	d505      	bpl.n	830 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     824:	2213      	movs	r2, #19
     826:	2332      	movs	r3, #50	; 0x32
     828:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     82a:	3b31      	subs	r3, #49	; 0x31
     82c:	8363      	strh	r3, [r4, #26]
     82e:	e7e2      	b.n	7f6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     830:	06da      	lsls	r2, r3, #27
     832:	d505      	bpl.n	840 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     834:	2242      	movs	r2, #66	; 0x42
     836:	2332      	movs	r3, #50	; 0x32
     838:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     83a:	3b22      	subs	r3, #34	; 0x22
     83c:	8363      	strh	r3, [r4, #26]
     83e:	e7da      	b.n	7f6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     840:	2220      	movs	r2, #32
     842:	421a      	tst	r2, r3
     844:	d0d7      	beq.n	7f6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     846:	3221      	adds	r2, #33	; 0x21
     848:	2332      	movs	r3, #50	; 0x32
     84a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     84c:	3b12      	subs	r3, #18
     84e:	8363      	strh	r3, [r4, #26]
     850:	e7d1      	b.n	7f6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     852:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     854:	05db      	lsls	r3, r3, #23
     856:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     858:	b2da      	uxtb	r2, r3
     85a:	6a69      	ldr	r1, [r5, #36]	; 0x24
     85c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     85e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     860:	1c51      	adds	r1, r2, #1
     862:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     864:	7969      	ldrb	r1, [r5, #5]
     866:	2901      	cmp	r1, #1
     868:	d010      	beq.n	88c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     86a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     86c:	3b01      	subs	r3, #1
     86e:	b29b      	uxth	r3, r3
     870:	85ab      	strh	r3, [r5, #44]	; 0x2c
     872:	2b00      	cmp	r3, #0
     874:	d112      	bne.n	89c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     876:	3304      	adds	r3, #4
     878:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     87a:	2200      	movs	r2, #0
     87c:	332e      	adds	r3, #46	; 0x2e
     87e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     880:	07bb      	lsls	r3, r7, #30
     882:	d50b      	bpl.n	89c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     884:	0028      	movs	r0, r5
     886:	692b      	ldr	r3, [r5, #16]
     888:	4798      	blx	r3
     88a:	e007      	b.n	89c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     88c:	0a1b      	lsrs	r3, r3, #8
     88e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     890:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     892:	3301      	adds	r3, #1
     894:	626b      	str	r3, [r5, #36]	; 0x24
     896:	e7e8      	b.n	86a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     898:	2304      	movs	r3, #4
     89a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     89c:	06f3      	lsls	r3, r6, #27
     89e:	d504      	bpl.n	8aa <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     8a0:	2310      	movs	r3, #16
     8a2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     8a4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     8a6:	06fb      	lsls	r3, r7, #27
     8a8:	d40e      	bmi.n	8c8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     8aa:	06b3      	lsls	r3, r6, #26
     8ac:	d504      	bpl.n	8b8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     8ae:	2320      	movs	r3, #32
     8b0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     8b2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     8b4:	073b      	lsls	r3, r7, #28
     8b6:	d40b      	bmi.n	8d0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     8b8:	0733      	lsls	r3, r6, #28
     8ba:	d504      	bpl.n	8c6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     8bc:	2308      	movs	r3, #8
     8be:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     8c0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     8c2:	06bb      	lsls	r3, r7, #26
     8c4:	d408      	bmi.n	8d8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     8c8:	0028      	movs	r0, r5
     8ca:	69eb      	ldr	r3, [r5, #28]
     8cc:	4798      	blx	r3
     8ce:	e7ec      	b.n	8aa <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     8d0:	0028      	movs	r0, r5
     8d2:	69ab      	ldr	r3, [r5, #24]
     8d4:	4798      	blx	r3
     8d6:	e7ef      	b.n	8b8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     8d8:	6a2b      	ldr	r3, [r5, #32]
     8da:	0028      	movs	r0, r5
     8dc:	4798      	blx	r3
}
     8de:	e7f2      	b.n	8c6 <_usart_interrupt_handler+0x176>
     8e0:	20000128 	.word	0x20000128

000008e4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e6:	46de      	mov	lr, fp
     8e8:	4657      	mov	r7, sl
     8ea:	464e      	mov	r6, r9
     8ec:	4645      	mov	r5, r8
     8ee:	b5e0      	push	{r5, r6, r7, lr}
     8f0:	b087      	sub	sp, #28
     8f2:	4680      	mov	r8, r0
     8f4:	9104      	str	r1, [sp, #16]
     8f6:	0016      	movs	r6, r2
     8f8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     8fa:	2200      	movs	r2, #0
     8fc:	2300      	movs	r3, #0
     8fe:	2100      	movs	r1, #0
     900:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     902:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     904:	2001      	movs	r0, #1
     906:	0021      	movs	r1, r4
     908:	9600      	str	r6, [sp, #0]
     90a:	9701      	str	r7, [sp, #4]
     90c:	465c      	mov	r4, fp
     90e:	9403      	str	r4, [sp, #12]
     910:	4644      	mov	r4, r8
     912:	9405      	str	r4, [sp, #20]
     914:	e013      	b.n	93e <long_division+0x5a>
     916:	2420      	movs	r4, #32
     918:	1a64      	subs	r4, r4, r1
     91a:	0005      	movs	r5, r0
     91c:	40e5      	lsrs	r5, r4
     91e:	46a8      	mov	r8, r5
     920:	e014      	b.n	94c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     922:	9c00      	ldr	r4, [sp, #0]
     924:	9d01      	ldr	r5, [sp, #4]
     926:	1b12      	subs	r2, r2, r4
     928:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     92a:	465c      	mov	r4, fp
     92c:	464d      	mov	r5, r9
     92e:	432c      	orrs	r4, r5
     930:	46a3      	mov	fp, r4
     932:	9c03      	ldr	r4, [sp, #12]
     934:	4645      	mov	r5, r8
     936:	432c      	orrs	r4, r5
     938:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     93a:	3901      	subs	r1, #1
     93c:	d325      	bcc.n	98a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     93e:	2420      	movs	r4, #32
     940:	4264      	negs	r4, r4
     942:	190c      	adds	r4, r1, r4
     944:	d4e7      	bmi.n	916 <long_division+0x32>
     946:	0005      	movs	r5, r0
     948:	40a5      	lsls	r5, r4
     94a:	46a8      	mov	r8, r5
     94c:	0004      	movs	r4, r0
     94e:	408c      	lsls	r4, r1
     950:	46a1      	mov	r9, r4
		r = r << 1;
     952:	1892      	adds	r2, r2, r2
     954:	415b      	adcs	r3, r3
     956:	0014      	movs	r4, r2
     958:	001d      	movs	r5, r3
		if (n & bit_shift) {
     95a:	9e05      	ldr	r6, [sp, #20]
     95c:	464f      	mov	r7, r9
     95e:	403e      	ands	r6, r7
     960:	46b4      	mov	ip, r6
     962:	9e04      	ldr	r6, [sp, #16]
     964:	4647      	mov	r7, r8
     966:	403e      	ands	r6, r7
     968:	46b2      	mov	sl, r6
     96a:	4666      	mov	r6, ip
     96c:	4657      	mov	r7, sl
     96e:	433e      	orrs	r6, r7
     970:	d003      	beq.n	97a <long_division+0x96>
			r |= 0x01;
     972:	0006      	movs	r6, r0
     974:	4326      	orrs	r6, r4
     976:	0032      	movs	r2, r6
     978:	002b      	movs	r3, r5
		if (r >= d) {
     97a:	9c00      	ldr	r4, [sp, #0]
     97c:	9d01      	ldr	r5, [sp, #4]
     97e:	429d      	cmp	r5, r3
     980:	d8db      	bhi.n	93a <long_division+0x56>
     982:	d1ce      	bne.n	922 <long_division+0x3e>
     984:	4294      	cmp	r4, r2
     986:	d8d8      	bhi.n	93a <long_division+0x56>
     988:	e7cb      	b.n	922 <long_division+0x3e>
     98a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     98c:	4658      	mov	r0, fp
     98e:	0019      	movs	r1, r3
     990:	b007      	add	sp, #28
     992:	bc3c      	pop	{r2, r3, r4, r5}
     994:	4690      	mov	r8, r2
     996:	4699      	mov	r9, r3
     998:	46a2      	mov	sl, r4
     99a:	46ab      	mov	fp, r5
     99c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000099e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     99e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     9a0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9a2:	2340      	movs	r3, #64	; 0x40
     9a4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     9a6:	4281      	cmp	r1, r0
     9a8:	d202      	bcs.n	9b0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     9aa:	0018      	movs	r0, r3
     9ac:	bd10      	pop	{r4, pc}
		baud_calculated++;
     9ae:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     9b0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     9b2:	1c63      	adds	r3, r4, #1
     9b4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     9b6:	4288      	cmp	r0, r1
     9b8:	d9f9      	bls.n	9ae <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9ba:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     9bc:	2cff      	cmp	r4, #255	; 0xff
     9be:	d8f4      	bhi.n	9aa <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     9c0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     9c2:	2300      	movs	r3, #0
     9c4:	e7f1      	b.n	9aa <_sercom_get_sync_baud_val+0xc>
	...

000009c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ca:	b083      	sub	sp, #12
     9cc:	000f      	movs	r7, r1
     9ce:	0016      	movs	r6, r2
     9d0:	aa08      	add	r2, sp, #32
     9d2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     9d4:	0004      	movs	r4, r0
     9d6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     9d8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     9da:	42bc      	cmp	r4, r7
     9dc:	d902      	bls.n	9e4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     9de:	0010      	movs	r0, r2
     9e0:	b003      	add	sp, #12
     9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     9e4:	2b00      	cmp	r3, #0
     9e6:	d114      	bne.n	a12 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     9e8:	0002      	movs	r2, r0
     9ea:	0008      	movs	r0, r1
     9ec:	2100      	movs	r1, #0
     9ee:	4c19      	ldr	r4, [pc, #100]	; (a54 <_sercom_get_async_baud_val+0x8c>)
     9f0:	47a0      	blx	r4
     9f2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     9f4:	003a      	movs	r2, r7
     9f6:	2300      	movs	r3, #0
     9f8:	2000      	movs	r0, #0
     9fa:	4c17      	ldr	r4, [pc, #92]	; (a58 <_sercom_get_async_baud_val+0x90>)
     9fc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     9fe:	2200      	movs	r2, #0
     a00:	2301      	movs	r3, #1
     a02:	1a12      	subs	r2, r2, r0
     a04:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     a06:	0c12      	lsrs	r2, r2, #16
     a08:	041b      	lsls	r3, r3, #16
     a0a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     a0c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     a0e:	2200      	movs	r2, #0
     a10:	e7e5      	b.n	9de <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     a12:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     a14:	2b01      	cmp	r3, #1
     a16:	d1f9      	bne.n	a0c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     a18:	000a      	movs	r2, r1
     a1a:	2300      	movs	r3, #0
     a1c:	2100      	movs	r1, #0
     a1e:	4c0d      	ldr	r4, [pc, #52]	; (a54 <_sercom_get_async_baud_val+0x8c>)
     a20:	47a0      	blx	r4
     a22:	0002      	movs	r2, r0
     a24:	000b      	movs	r3, r1
     a26:	9200      	str	r2, [sp, #0]
     a28:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     a2a:	0038      	movs	r0, r7
     a2c:	2100      	movs	r1, #0
     a2e:	4c0a      	ldr	r4, [pc, #40]	; (a58 <_sercom_get_async_baud_val+0x90>)
     a30:	47a0      	blx	r4
     a32:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     a34:	2380      	movs	r3, #128	; 0x80
     a36:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a38:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     a3a:	4298      	cmp	r0, r3
     a3c:	d8cf      	bhi.n	9de <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     a3e:	0f79      	lsrs	r1, r7, #29
     a40:	00f8      	lsls	r0, r7, #3
     a42:	9a00      	ldr	r2, [sp, #0]
     a44:	9b01      	ldr	r3, [sp, #4]
     a46:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     a48:	00ea      	lsls	r2, r5, #3
     a4a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     a4c:	b2d2      	uxtb	r2, r2
     a4e:	0352      	lsls	r2, r2, #13
     a50:	432a      	orrs	r2, r5
     a52:	e7db      	b.n	a0c <_sercom_get_async_baud_val+0x44>
     a54:	00001729 	.word	0x00001729
     a58:	000008e5 	.word	0x000008e5

00000a5c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a5c:	b510      	push	{r4, lr}
     a5e:	b082      	sub	sp, #8
     a60:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     a62:	4b0e      	ldr	r3, [pc, #56]	; (a9c <sercom_set_gclk_generator+0x40>)
     a64:	781b      	ldrb	r3, [r3, #0]
     a66:	2b00      	cmp	r3, #0
     a68:	d007      	beq.n	a7a <sercom_set_gclk_generator+0x1e>
     a6a:	2900      	cmp	r1, #0
     a6c:	d105      	bne.n	a7a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     a6e:	4b0b      	ldr	r3, [pc, #44]	; (a9c <sercom_set_gclk_generator+0x40>)
     a70:	785b      	ldrb	r3, [r3, #1]
     a72:	4283      	cmp	r3, r0
     a74:	d010      	beq.n	a98 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a76:	201d      	movs	r0, #29
     a78:	e00c      	b.n	a94 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     a7a:	a901      	add	r1, sp, #4
     a7c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a7e:	2013      	movs	r0, #19
     a80:	4b07      	ldr	r3, [pc, #28]	; (aa0 <sercom_set_gclk_generator+0x44>)
     a82:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a84:	2013      	movs	r0, #19
     a86:	4b07      	ldr	r3, [pc, #28]	; (aa4 <sercom_set_gclk_generator+0x48>)
     a88:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <sercom_set_gclk_generator+0x40>)
     a8c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     a8e:	2201      	movs	r2, #1
     a90:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     a92:	2000      	movs	r0, #0
}
     a94:	b002      	add	sp, #8
     a96:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     a98:	2000      	movs	r0, #0
     a9a:	e7fb      	b.n	a94 <sercom_set_gclk_generator+0x38>
     a9c:	20000084 	.word	0x20000084
     aa0:	00001379 	.word	0x00001379
     aa4:	000012ed 	.word	0x000012ed

00000aa8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     aa8:	4b40      	ldr	r3, [pc, #256]	; (bac <_sercom_get_default_pad+0x104>)
     aaa:	4298      	cmp	r0, r3
     aac:	d031      	beq.n	b12 <_sercom_get_default_pad+0x6a>
     aae:	d90a      	bls.n	ac6 <_sercom_get_default_pad+0x1e>
     ab0:	4b3f      	ldr	r3, [pc, #252]	; (bb0 <_sercom_get_default_pad+0x108>)
     ab2:	4298      	cmp	r0, r3
     ab4:	d04d      	beq.n	b52 <_sercom_get_default_pad+0xaa>
     ab6:	4b3f      	ldr	r3, [pc, #252]	; (bb4 <_sercom_get_default_pad+0x10c>)
     ab8:	4298      	cmp	r0, r3
     aba:	d05a      	beq.n	b72 <_sercom_get_default_pad+0xca>
     abc:	4b3e      	ldr	r3, [pc, #248]	; (bb8 <_sercom_get_default_pad+0x110>)
     abe:	4298      	cmp	r0, r3
     ac0:	d037      	beq.n	b32 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     ac2:	2000      	movs	r0, #0
}
     ac4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     ac6:	4b3d      	ldr	r3, [pc, #244]	; (bbc <_sercom_get_default_pad+0x114>)
     ac8:	4298      	cmp	r0, r3
     aca:	d00c      	beq.n	ae6 <_sercom_get_default_pad+0x3e>
     acc:	4b3c      	ldr	r3, [pc, #240]	; (bc0 <_sercom_get_default_pad+0x118>)
     ace:	4298      	cmp	r0, r3
     ad0:	d1f7      	bne.n	ac2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ad2:	2901      	cmp	r1, #1
     ad4:	d017      	beq.n	b06 <_sercom_get_default_pad+0x5e>
     ad6:	2900      	cmp	r1, #0
     ad8:	d05d      	beq.n	b96 <_sercom_get_default_pad+0xee>
     ada:	2902      	cmp	r1, #2
     adc:	d015      	beq.n	b0a <_sercom_get_default_pad+0x62>
     ade:	2903      	cmp	r1, #3
     ae0:	d015      	beq.n	b0e <_sercom_get_default_pad+0x66>
	return 0;
     ae2:	2000      	movs	r0, #0
     ae4:	e7ee      	b.n	ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ae6:	2901      	cmp	r1, #1
     ae8:	d007      	beq.n	afa <_sercom_get_default_pad+0x52>
     aea:	2900      	cmp	r1, #0
     aec:	d051      	beq.n	b92 <_sercom_get_default_pad+0xea>
     aee:	2902      	cmp	r1, #2
     af0:	d005      	beq.n	afe <_sercom_get_default_pad+0x56>
     af2:	2903      	cmp	r1, #3
     af4:	d005      	beq.n	b02 <_sercom_get_default_pad+0x5a>
	return 0;
     af6:	2000      	movs	r0, #0
     af8:	e7e4      	b.n	ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     afa:	4832      	ldr	r0, [pc, #200]	; (bc4 <_sercom_get_default_pad+0x11c>)
     afc:	e7e2      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     afe:	4832      	ldr	r0, [pc, #200]	; (bc8 <_sercom_get_default_pad+0x120>)
     b00:	e7e0      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b02:	4832      	ldr	r0, [pc, #200]	; (bcc <_sercom_get_default_pad+0x124>)
     b04:	e7de      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b06:	4832      	ldr	r0, [pc, #200]	; (bd0 <_sercom_get_default_pad+0x128>)
     b08:	e7dc      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b0a:	4832      	ldr	r0, [pc, #200]	; (bd4 <_sercom_get_default_pad+0x12c>)
     b0c:	e7da      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b0e:	4832      	ldr	r0, [pc, #200]	; (bd8 <_sercom_get_default_pad+0x130>)
     b10:	e7d8      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b12:	2901      	cmp	r1, #1
     b14:	d007      	beq.n	b26 <_sercom_get_default_pad+0x7e>
     b16:	2900      	cmp	r1, #0
     b18:	d03f      	beq.n	b9a <_sercom_get_default_pad+0xf2>
     b1a:	2902      	cmp	r1, #2
     b1c:	d005      	beq.n	b2a <_sercom_get_default_pad+0x82>
     b1e:	2903      	cmp	r1, #3
     b20:	d005      	beq.n	b2e <_sercom_get_default_pad+0x86>
	return 0;
     b22:	2000      	movs	r0, #0
     b24:	e7ce      	b.n	ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b26:	482d      	ldr	r0, [pc, #180]	; (bdc <_sercom_get_default_pad+0x134>)
     b28:	e7cc      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b2a:	482d      	ldr	r0, [pc, #180]	; (be0 <_sercom_get_default_pad+0x138>)
     b2c:	e7ca      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b2e:	482d      	ldr	r0, [pc, #180]	; (be4 <_sercom_get_default_pad+0x13c>)
     b30:	e7c8      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b32:	2901      	cmp	r1, #1
     b34:	d007      	beq.n	b46 <_sercom_get_default_pad+0x9e>
     b36:	2900      	cmp	r1, #0
     b38:	d031      	beq.n	b9e <_sercom_get_default_pad+0xf6>
     b3a:	2902      	cmp	r1, #2
     b3c:	d005      	beq.n	b4a <_sercom_get_default_pad+0xa2>
     b3e:	2903      	cmp	r1, #3
     b40:	d005      	beq.n	b4e <_sercom_get_default_pad+0xa6>
	return 0;
     b42:	2000      	movs	r0, #0
     b44:	e7be      	b.n	ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b46:	4828      	ldr	r0, [pc, #160]	; (be8 <_sercom_get_default_pad+0x140>)
     b48:	e7bc      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b4a:	4828      	ldr	r0, [pc, #160]	; (bec <_sercom_get_default_pad+0x144>)
     b4c:	e7ba      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b4e:	4828      	ldr	r0, [pc, #160]	; (bf0 <_sercom_get_default_pad+0x148>)
     b50:	e7b8      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b52:	2901      	cmp	r1, #1
     b54:	d007      	beq.n	b66 <_sercom_get_default_pad+0xbe>
     b56:	2900      	cmp	r1, #0
     b58:	d023      	beq.n	ba2 <_sercom_get_default_pad+0xfa>
     b5a:	2902      	cmp	r1, #2
     b5c:	d005      	beq.n	b6a <_sercom_get_default_pad+0xc2>
     b5e:	2903      	cmp	r1, #3
     b60:	d005      	beq.n	b6e <_sercom_get_default_pad+0xc6>
	return 0;
     b62:	2000      	movs	r0, #0
     b64:	e7ae      	b.n	ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b66:	4823      	ldr	r0, [pc, #140]	; (bf4 <_sercom_get_default_pad+0x14c>)
     b68:	e7ac      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b6a:	4823      	ldr	r0, [pc, #140]	; (bf8 <_sercom_get_default_pad+0x150>)
     b6c:	e7aa      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b6e:	4823      	ldr	r0, [pc, #140]	; (bfc <_sercom_get_default_pad+0x154>)
     b70:	e7a8      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b72:	2901      	cmp	r1, #1
     b74:	d007      	beq.n	b86 <_sercom_get_default_pad+0xde>
     b76:	2900      	cmp	r1, #0
     b78:	d015      	beq.n	ba6 <_sercom_get_default_pad+0xfe>
     b7a:	2902      	cmp	r1, #2
     b7c:	d005      	beq.n	b8a <_sercom_get_default_pad+0xe2>
     b7e:	2903      	cmp	r1, #3
     b80:	d005      	beq.n	b8e <_sercom_get_default_pad+0xe6>
	return 0;
     b82:	2000      	movs	r0, #0
     b84:	e79e      	b.n	ac4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b86:	481e      	ldr	r0, [pc, #120]	; (c00 <_sercom_get_default_pad+0x158>)
     b88:	e79c      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b8a:	481e      	ldr	r0, [pc, #120]	; (c04 <_sercom_get_default_pad+0x15c>)
     b8c:	e79a      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b8e:	481e      	ldr	r0, [pc, #120]	; (c08 <_sercom_get_default_pad+0x160>)
     b90:	e798      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b92:	481e      	ldr	r0, [pc, #120]	; (c0c <_sercom_get_default_pad+0x164>)
     b94:	e796      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b96:	2003      	movs	r0, #3
     b98:	e794      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b9a:	481d      	ldr	r0, [pc, #116]	; (c10 <_sercom_get_default_pad+0x168>)
     b9c:	e792      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     b9e:	481d      	ldr	r0, [pc, #116]	; (c14 <_sercom_get_default_pad+0x16c>)
     ba0:	e790      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     ba2:	481d      	ldr	r0, [pc, #116]	; (c18 <_sercom_get_default_pad+0x170>)
     ba4:	e78e      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     ba6:	481d      	ldr	r0, [pc, #116]	; (c1c <_sercom_get_default_pad+0x174>)
     ba8:	e78c      	b.n	ac4 <_sercom_get_default_pad+0x1c>
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	42001000 	.word	0x42001000
     bb0:	42001800 	.word	0x42001800
     bb4:	42001c00 	.word	0x42001c00
     bb8:	42001400 	.word	0x42001400
     bbc:	42000800 	.word	0x42000800
     bc0:	42000c00 	.word	0x42000c00
     bc4:	00050003 	.word	0x00050003
     bc8:	00060003 	.word	0x00060003
     bcc:	00070003 	.word	0x00070003
     bd0:	00010003 	.word	0x00010003
     bd4:	001e0003 	.word	0x001e0003
     bd8:	001f0003 	.word	0x001f0003
     bdc:	00090003 	.word	0x00090003
     be0:	000a0003 	.word	0x000a0003
     be4:	000b0003 	.word	0x000b0003
     be8:	00110003 	.word	0x00110003
     bec:	00120003 	.word	0x00120003
     bf0:	00130003 	.word	0x00130003
     bf4:	000d0003 	.word	0x000d0003
     bf8:	000e0003 	.word	0x000e0003
     bfc:	000f0003 	.word	0x000f0003
     c00:	00170003 	.word	0x00170003
     c04:	00180003 	.word	0x00180003
     c08:	00190003 	.word	0x00190003
     c0c:	00040003 	.word	0x00040003
     c10:	00080003 	.word	0x00080003
     c14:	00100003 	.word	0x00100003
     c18:	000c0003 	.word	0x000c0003
     c1c:	00160003 	.word	0x00160003

00000c20 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c20:	b530      	push	{r4, r5, lr}
     c22:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c24:	4b0b      	ldr	r3, [pc, #44]	; (c54 <_sercom_get_sercom_inst_index+0x34>)
     c26:	466a      	mov	r2, sp
     c28:	cb32      	ldmia	r3!, {r1, r4, r5}
     c2a:	c232      	stmia	r2!, {r1, r4, r5}
     c2c:	cb32      	ldmia	r3!, {r1, r4, r5}
     c2e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c30:	9b00      	ldr	r3, [sp, #0]
     c32:	4283      	cmp	r3, r0
     c34:	d00b      	beq.n	c4e <_sercom_get_sercom_inst_index+0x2e>
     c36:	2301      	movs	r3, #1
     c38:	009a      	lsls	r2, r3, #2
     c3a:	4669      	mov	r1, sp
     c3c:	5852      	ldr	r2, [r2, r1]
     c3e:	4282      	cmp	r2, r0
     c40:	d006      	beq.n	c50 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c42:	3301      	adds	r3, #1
     c44:	2b06      	cmp	r3, #6
     c46:	d1f7      	bne.n	c38 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     c48:	2000      	movs	r0, #0
}
     c4a:	b007      	add	sp, #28
     c4c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c4e:	2300      	movs	r3, #0
			return i;
     c50:	b2d8      	uxtb	r0, r3
     c52:	e7fa      	b.n	c4a <_sercom_get_sercom_inst_index+0x2a>
     c54:	000022a8 	.word	0x000022a8

00000c58 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c58:	4770      	bx	lr
	...

00000c5c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c5e:	4b0a      	ldr	r3, [pc, #40]	; (c88 <_sercom_set_handler+0x2c>)
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d10c      	bne.n	c80 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c66:	4f09      	ldr	r7, [pc, #36]	; (c8c <_sercom_set_handler+0x30>)
     c68:	4e09      	ldr	r6, [pc, #36]	; (c90 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c6a:	4d0a      	ldr	r5, [pc, #40]	; (c94 <_sercom_set_handler+0x38>)
     c6c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c6e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c70:	195a      	adds	r2, r3, r5
     c72:	6014      	str	r4, [r2, #0]
     c74:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c76:	2b18      	cmp	r3, #24
     c78:	d1f9      	bne.n	c6e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     c7a:	2201      	movs	r2, #1
     c7c:	4b02      	ldr	r3, [pc, #8]	; (c88 <_sercom_set_handler+0x2c>)
     c7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c80:	0080      	lsls	r0, r0, #2
     c82:	4b02      	ldr	r3, [pc, #8]	; (c8c <_sercom_set_handler+0x30>)
     c84:	50c1      	str	r1, [r0, r3]
}
     c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c88:	20000086 	.word	0x20000086
     c8c:	20000088 	.word	0x20000088
     c90:	00000c59 	.word	0x00000c59
     c94:	20000128 	.word	0x20000128

00000c98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c98:	b500      	push	{lr}
     c9a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c9c:	2309      	movs	r3, #9
     c9e:	466a      	mov	r2, sp
     ca0:	7013      	strb	r3, [r2, #0]
     ca2:	3301      	adds	r3, #1
     ca4:	7053      	strb	r3, [r2, #1]
     ca6:	3301      	adds	r3, #1
     ca8:	7093      	strb	r3, [r2, #2]
     caa:	3301      	adds	r3, #1
     cac:	70d3      	strb	r3, [r2, #3]
     cae:	3301      	adds	r3, #1
     cb0:	7113      	strb	r3, [r2, #4]
     cb2:	3301      	adds	r3, #1
     cb4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     cb6:	4b03      	ldr	r3, [pc, #12]	; (cc4 <_sercom_get_interrupt_vector+0x2c>)
     cb8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     cba:	466b      	mov	r3, sp
     cbc:	5618      	ldrsb	r0, [r3, r0]
}
     cbe:	b003      	add	sp, #12
     cc0:	bd00      	pop	{pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	00000c21 	.word	0x00000c21

00000cc8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     cc8:	b510      	push	{r4, lr}
     cca:	4b02      	ldr	r3, [pc, #8]	; (cd4 <SERCOM0_Handler+0xc>)
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	2000      	movs	r0, #0
     cd0:	4798      	blx	r3
     cd2:	bd10      	pop	{r4, pc}
     cd4:	20000088 	.word	0x20000088

00000cd8 <SERCOM1_Handler>:
     cd8:	b510      	push	{r4, lr}
     cda:	4b02      	ldr	r3, [pc, #8]	; (ce4 <SERCOM1_Handler+0xc>)
     cdc:	685b      	ldr	r3, [r3, #4]
     cde:	2001      	movs	r0, #1
     ce0:	4798      	blx	r3
     ce2:	bd10      	pop	{r4, pc}
     ce4:	20000088 	.word	0x20000088

00000ce8 <SERCOM2_Handler>:
     ce8:	b510      	push	{r4, lr}
     cea:	4b02      	ldr	r3, [pc, #8]	; (cf4 <SERCOM2_Handler+0xc>)
     cec:	689b      	ldr	r3, [r3, #8]
     cee:	2002      	movs	r0, #2
     cf0:	4798      	blx	r3
     cf2:	bd10      	pop	{r4, pc}
     cf4:	20000088 	.word	0x20000088

00000cf8 <SERCOM3_Handler>:
     cf8:	b510      	push	{r4, lr}
     cfa:	4b02      	ldr	r3, [pc, #8]	; (d04 <SERCOM3_Handler+0xc>)
     cfc:	68db      	ldr	r3, [r3, #12]
     cfe:	2003      	movs	r0, #3
     d00:	4798      	blx	r3
     d02:	bd10      	pop	{r4, pc}
     d04:	20000088 	.word	0x20000088

00000d08 <SERCOM4_Handler>:
     d08:	b510      	push	{r4, lr}
     d0a:	4b02      	ldr	r3, [pc, #8]	; (d14 <SERCOM4_Handler+0xc>)
     d0c:	691b      	ldr	r3, [r3, #16]
     d0e:	2004      	movs	r0, #4
     d10:	4798      	blx	r3
     d12:	bd10      	pop	{r4, pc}
     d14:	20000088 	.word	0x20000088

00000d18 <SERCOM5_Handler>:
     d18:	b510      	push	{r4, lr}
     d1a:	4b02      	ldr	r3, [pc, #8]	; (d24 <SERCOM5_Handler+0xc>)
     d1c:	695b      	ldr	r3, [r3, #20]
     d1e:	2005      	movs	r0, #5
     d20:	4798      	blx	r3
     d22:	bd10      	pop	{r4, pc}
     d24:	20000088 	.word	0x20000088

00000d28 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     d28:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d2a:	2200      	movs	r2, #0
     d2c:	4b10      	ldr	r3, [pc, #64]	; (d70 <EIC_Handler+0x48>)
     d2e:	701a      	strb	r2, [r3, #0]
     d30:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     d32:	4910      	ldr	r1, [pc, #64]	; (d74 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     d34:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     d36:	4e10      	ldr	r6, [pc, #64]	; (d78 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d38:	4c0d      	ldr	r4, [pc, #52]	; (d70 <EIC_Handler+0x48>)
     d3a:	e00a      	b.n	d52 <EIC_Handler+0x2a>
		return eics[eic_index];
     d3c:	490d      	ldr	r1, [pc, #52]	; (d74 <EIC_Handler+0x4c>)
     d3e:	e008      	b.n	d52 <EIC_Handler+0x2a>
     d40:	7823      	ldrb	r3, [r4, #0]
     d42:	3301      	adds	r3, #1
     d44:	b2db      	uxtb	r3, r3
     d46:	7023      	strb	r3, [r4, #0]
     d48:	2b0f      	cmp	r3, #15
     d4a:	d810      	bhi.n	d6e <EIC_Handler+0x46>
		return NULL;
     d4c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     d4e:	2b1f      	cmp	r3, #31
     d50:	d9f4      	bls.n	d3c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     d52:	0028      	movs	r0, r5
     d54:	4018      	ands	r0, r3
     d56:	2201      	movs	r2, #1
     d58:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     d5a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     d5c:	4210      	tst	r0, r2
     d5e:	d0ef      	beq.n	d40 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     d60:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     d62:	009b      	lsls	r3, r3, #2
     d64:	599b      	ldr	r3, [r3, r6]
     d66:	2b00      	cmp	r3, #0
     d68:	d0ea      	beq.n	d40 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     d6a:	4798      	blx	r3
     d6c:	e7e8      	b.n	d40 <EIC_Handler+0x18>
			}
		}
	}
}
     d6e:	bd70      	pop	{r4, r5, r6, pc}
     d70:	20000140 	.word	0x20000140
     d74:	40001800 	.word	0x40001800
     d78:	200000d0 	.word	0x200000d0

00000d7c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     d7c:	b570      	push	{r4, r5, r6, lr}
     d7e:	b082      	sub	sp, #8
     d80:	0005      	movs	r5, r0
     d82:	000e      	movs	r6, r1
	uint16_t temp = 0;
     d84:	2200      	movs	r2, #0
     d86:	466b      	mov	r3, sp
     d88:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     d8a:	4c06      	ldr	r4, [pc, #24]	; (da4 <usart_serial_getchar+0x28>)
     d8c:	466b      	mov	r3, sp
     d8e:	1d99      	adds	r1, r3, #6
     d90:	0028      	movs	r0, r5
     d92:	47a0      	blx	r4
     d94:	2800      	cmp	r0, #0
     d96:	d1f9      	bne.n	d8c <usart_serial_getchar+0x10>

	*c = temp;
     d98:	466b      	mov	r3, sp
     d9a:	3306      	adds	r3, #6
     d9c:	881b      	ldrh	r3, [r3, #0]
     d9e:	7033      	strb	r3, [r6, #0]
}
     da0:	b002      	add	sp, #8
     da2:	bd70      	pop	{r4, r5, r6, pc}
     da4:	000006e7 	.word	0x000006e7

00000da8 <usart_serial_putchar>:
{
     da8:	b570      	push	{r4, r5, r6, lr}
     daa:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     dac:	b28c      	uxth	r4, r1
     dae:	4e03      	ldr	r6, [pc, #12]	; (dbc <usart_serial_putchar+0x14>)
     db0:	0021      	movs	r1, r4
     db2:	0028      	movs	r0, r5
     db4:	47b0      	blx	r6
     db6:	2800      	cmp	r0, #0
     db8:	d1fa      	bne.n	db0 <usart_serial_putchar+0x8>
}
     dba:	bd70      	pop	{r4, r5, r6, pc}
     dbc:	000006c1 	.word	0x000006c1

00000dc0 <configure_stdio_serial>:
        
    usart_enable(&usart_instance);
}

void configure_stdio_serial(void)
{
     dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     dc4:	2380      	movs	r3, #128	; 0x80
     dc6:	05db      	lsls	r3, r3, #23
     dc8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     dca:	2300      	movs	r3, #0
     dcc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     dce:	22ff      	movs	r2, #255	; 0xff
     dd0:	4669      	mov	r1, sp
     dd2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     dd4:	2200      	movs	r2, #0
     dd6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     dd8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     dda:	2401      	movs	r4, #1
     ddc:	2124      	movs	r1, #36	; 0x24
     dde:	4668      	mov	r0, sp
     de0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     de2:	3101      	adds	r1, #1
     de4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     de6:	3101      	adds	r1, #1
     de8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     dea:	3101      	adds	r1, #1
     dec:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     dee:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     df0:	3105      	adds	r1, #5
     df2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     df4:	3101      	adds	r1, #1
     df6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     df8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     dfa:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     dfc:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     dfe:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     e00:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     e02:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     e04:	2313      	movs	r3, #19
     e06:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     e08:	7742      	strb	r2, [r0, #29]
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
    config_usart.baudrate = 38400;
     e0a:	2396      	movs	r3, #150	; 0x96
     e0c:	021b      	lsls	r3, r3, #8
     e0e:	9308      	str	r3, [sp, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
     e10:	2380      	movs	r3, #128	; 0x80
     e12:	035b      	lsls	r3, r3, #13
     e14:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0; // TX
     e16:	4b19      	ldr	r3, [pc, #100]	; (e7c <configure_stdio_serial+0xbc>)
     e18:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1; // RX/XCK
     e1a:	4b19      	ldr	r3, [pc, #100]	; (e80 <configure_stdio_serial+0xc0>)
     e1c:	930d      	str	r3, [sp, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
     e1e:	2301      	movs	r3, #1
     e20:	425b      	negs	r3, r3
     e22:	930e      	str	r3, [sp, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
     e24:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     e26:	4d17      	ldr	r5, [pc, #92]	; (e84 <configure_stdio_serial+0xc4>)
     e28:	4b17      	ldr	r3, [pc, #92]	; (e88 <configure_stdio_serial+0xc8>)
     e2a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e2c:	4a17      	ldr	r2, [pc, #92]	; (e8c <configure_stdio_serial+0xcc>)
     e2e:	4b18      	ldr	r3, [pc, #96]	; (e90 <configure_stdio_serial+0xd0>)
     e30:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e32:	4a18      	ldr	r2, [pc, #96]	; (e94 <configure_stdio_serial+0xd4>)
     e34:	4b18      	ldr	r3, [pc, #96]	; (e98 <configure_stdio_serial+0xd8>)
     e36:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
     e38:	466a      	mov	r2, sp
     e3a:	4918      	ldr	r1, [pc, #96]	; (e9c <configure_stdio_serial+0xdc>)
     e3c:	0028      	movs	r0, r5
     e3e:	4b18      	ldr	r3, [pc, #96]	; (ea0 <configure_stdio_serial+0xe0>)
     e40:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     e42:	4f18      	ldr	r7, [pc, #96]	; (ea4 <configure_stdio_serial+0xe4>)
     e44:	683b      	ldr	r3, [r7, #0]
     e46:	6898      	ldr	r0, [r3, #8]
     e48:	2100      	movs	r1, #0
     e4a:	4e17      	ldr	r6, [pc, #92]	; (ea8 <configure_stdio_serial+0xe8>)
     e4c:	47b0      	blx	r6
	setbuf(stdin, NULL);
     e4e:	683b      	ldr	r3, [r7, #0]
     e50:	6858      	ldr	r0, [r3, #4]
     e52:	2100      	movs	r1, #0
     e54:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     e56:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e58:	0030      	movs	r0, r6
     e5a:	4b14      	ldr	r3, [pc, #80]	; (eac <configure_stdio_serial+0xec>)
     e5c:	4798      	blx	r3
     e5e:	231f      	movs	r3, #31
     e60:	4018      	ands	r0, r3
     e62:	4084      	lsls	r4, r0
     e64:	4b12      	ldr	r3, [pc, #72]	; (eb0 <configure_stdio_serial+0xf0>)
     e66:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e68:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e6a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e6c:	2b00      	cmp	r3, #0
     e6e:	d1fc      	bne.n	e6a <configure_stdio_serial+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     e70:	6833      	ldr	r3, [r6, #0]
     e72:	2202      	movs	r2, #2
     e74:	4313      	orrs	r3, r2
     e76:	6033      	str	r3, [r6, #0]
    stdio_serial_init(&usart_instance, SERCOM0, &config_usart);
    
    usart_enable(&usart_instance);
     e78:	b011      	add	sp, #68	; 0x44
     e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e7c:	00080002 	.word	0x00080002
     e80:	00090002 	.word	0x00090002
     e84:	20000144 	.word	0x20000144
     e88:	20000118 	.word	0x20000118
     e8c:	00000da9 	.word	0x00000da9
     e90:	20000114 	.word	0x20000114
     e94:	00000d7d 	.word	0x00000d7d
     e98:	20000110 	.word	0x20000110
     e9c:	42000800 	.word	0x42000800
     ea0:	00000385 	.word	0x00000385
     ea4:	20000004 	.word	0x20000004
     ea8:	000018a9 	.word	0x000018a9
     eac:	00000c99 	.word	0x00000c99
     eb0:	e000e100 	.word	0xe000e100

00000eb4 <system_board_init>:
{
     eb4:	b510      	push	{r4, lr}
    configure_stdio_serial();
     eb6:	4b01      	ldr	r3, [pc, #4]	; (ebc <system_board_init+0x8>)
     eb8:	4798      	blx	r3
}
     eba:	bd10      	pop	{r4, pc}
     ebc:	00000dc1 	.word	0x00000dc1

00000ec0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ec0:	4b0c      	ldr	r3, [pc, #48]	; (ef4 <cpu_irq_enter_critical+0x34>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d106      	bne.n	ed6 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ec8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ecc:	2b00      	cmp	r3, #0
     ece:	d007      	beq.n	ee0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ed0:	2200      	movs	r2, #0
     ed2:	4b09      	ldr	r3, [pc, #36]	; (ef8 <cpu_irq_enter_critical+0x38>)
     ed4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     ed6:	4a07      	ldr	r2, [pc, #28]	; (ef4 <cpu_irq_enter_critical+0x34>)
     ed8:	6813      	ldr	r3, [r2, #0]
     eda:	3301      	adds	r3, #1
     edc:	6013      	str	r3, [r2, #0]
}
     ede:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     ee0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     ee2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     ee6:	2200      	movs	r2, #0
     ee8:	4b04      	ldr	r3, [pc, #16]	; (efc <cpu_irq_enter_critical+0x3c>)
     eea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     eec:	3201      	adds	r2, #1
     eee:	4b02      	ldr	r3, [pc, #8]	; (ef8 <cpu_irq_enter_critical+0x38>)
     ef0:	701a      	strb	r2, [r3, #0]
     ef2:	e7f0      	b.n	ed6 <cpu_irq_enter_critical+0x16>
     ef4:	200000a0 	.word	0x200000a0
     ef8:	200000a4 	.word	0x200000a4
     efc:	20000000 	.word	0x20000000

00000f00 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f00:	4b08      	ldr	r3, [pc, #32]	; (f24 <cpu_irq_leave_critical+0x24>)
     f02:	681a      	ldr	r2, [r3, #0]
     f04:	3a01      	subs	r2, #1
     f06:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d109      	bne.n	f22 <cpu_irq_leave_critical+0x22>
     f0e:	4b06      	ldr	r3, [pc, #24]	; (f28 <cpu_irq_leave_critical+0x28>)
     f10:	781b      	ldrb	r3, [r3, #0]
     f12:	2b00      	cmp	r3, #0
     f14:	d005      	beq.n	f22 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f16:	2201      	movs	r2, #1
     f18:	4b04      	ldr	r3, [pc, #16]	; (f2c <cpu_irq_leave_critical+0x2c>)
     f1a:	701a      	strb	r2, [r3, #0]
     f1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     f20:	b662      	cpsie	i
	}
}
     f22:	4770      	bx	lr
     f24:	200000a0 	.word	0x200000a0
     f28:	200000a4 	.word	0x200000a4
     f2c:	20000000 	.word	0x20000000

00000f30 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f30:	b510      	push	{r4, lr}
	switch (clock_source) {
     f32:	2808      	cmp	r0, #8
     f34:	d803      	bhi.n	f3e <system_clock_source_get_hz+0xe>
     f36:	0080      	lsls	r0, r0, #2
     f38:	4b1c      	ldr	r3, [pc, #112]	; (fac <system_clock_source_get_hz+0x7c>)
     f3a:	581b      	ldr	r3, [r3, r0]
     f3c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     f3e:	2000      	movs	r0, #0
     f40:	e032      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     f42:	4b1b      	ldr	r3, [pc, #108]	; (fb0 <system_clock_source_get_hz+0x80>)
     f44:	6918      	ldr	r0, [r3, #16]
     f46:	e02f      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f48:	4b1a      	ldr	r3, [pc, #104]	; (fb4 <system_clock_source_get_hz+0x84>)
     f4a:	6a1b      	ldr	r3, [r3, #32]
     f4c:	059b      	lsls	r3, r3, #22
     f4e:	0f9b      	lsrs	r3, r3, #30
     f50:	4819      	ldr	r0, [pc, #100]	; (fb8 <system_clock_source_get_hz+0x88>)
     f52:	40d8      	lsrs	r0, r3
     f54:	e028      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     f56:	4b16      	ldr	r3, [pc, #88]	; (fb0 <system_clock_source_get_hz+0x80>)
     f58:	6958      	ldr	r0, [r3, #20]
     f5a:	e025      	b.n	fa8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f5c:	4b14      	ldr	r3, [pc, #80]	; (fb0 <system_clock_source_get_hz+0x80>)
     f5e:	681b      	ldr	r3, [r3, #0]
			return 0;
     f60:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f62:	079b      	lsls	r3, r3, #30
     f64:	d520      	bpl.n	fa8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f66:	4913      	ldr	r1, [pc, #76]	; (fb4 <system_clock_source_get_hz+0x84>)
     f68:	2210      	movs	r2, #16
     f6a:	68cb      	ldr	r3, [r1, #12]
     f6c:	421a      	tst	r2, r3
     f6e:	d0fc      	beq.n	f6a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     f70:	4b0f      	ldr	r3, [pc, #60]	; (fb0 <system_clock_source_get_hz+0x80>)
     f72:	681a      	ldr	r2, [r3, #0]
     f74:	2324      	movs	r3, #36	; 0x24
     f76:	4013      	ands	r3, r2
     f78:	2b04      	cmp	r3, #4
     f7a:	d001      	beq.n	f80 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     f7c:	480f      	ldr	r0, [pc, #60]	; (fbc <system_clock_source_get_hz+0x8c>)
     f7e:	e013      	b.n	fa8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f80:	2000      	movs	r0, #0
     f82:	4b0f      	ldr	r3, [pc, #60]	; (fc0 <system_clock_source_get_hz+0x90>)
     f84:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f86:	4b0a      	ldr	r3, [pc, #40]	; (fb0 <system_clock_source_get_hz+0x80>)
     f88:	689b      	ldr	r3, [r3, #8]
     f8a:	041b      	lsls	r3, r3, #16
     f8c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f8e:	4358      	muls	r0, r3
     f90:	e00a      	b.n	fa8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f92:	2350      	movs	r3, #80	; 0x50
     f94:	4a07      	ldr	r2, [pc, #28]	; (fb4 <system_clock_source_get_hz+0x84>)
     f96:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     f98:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f9a:	075b      	lsls	r3, r3, #29
     f9c:	d504      	bpl.n	fa8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     f9e:	4b04      	ldr	r3, [pc, #16]	; (fb0 <system_clock_source_get_hz+0x80>)
     fa0:	68d8      	ldr	r0, [r3, #12]
     fa2:	e001      	b.n	fa8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     fa4:	2080      	movs	r0, #128	; 0x80
     fa6:	0200      	lsls	r0, r0, #8
	}
}
     fa8:	bd10      	pop	{r4, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	000022c0 	.word	0x000022c0
     fb0:	200000a8 	.word	0x200000a8
     fb4:	40000800 	.word	0x40000800
     fb8:	007a1200 	.word	0x007a1200
     fbc:	02dc6c00 	.word	0x02dc6c00
     fc0:	00001395 	.word	0x00001395

00000fc4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fc4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fc6:	490c      	ldr	r1, [pc, #48]	; (ff8 <system_clock_source_osc8m_set_config+0x34>)
     fc8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     fca:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     fcc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     fce:	7840      	ldrb	r0, [r0, #1]
     fd0:	2201      	movs	r2, #1
     fd2:	4010      	ands	r0, r2
     fd4:	0180      	lsls	r0, r0, #6
     fd6:	2640      	movs	r6, #64	; 0x40
     fd8:	43b3      	bics	r3, r6
     fda:	4303      	orrs	r3, r0
     fdc:	402a      	ands	r2, r5
     fde:	01d2      	lsls	r2, r2, #7
     fe0:	2080      	movs	r0, #128	; 0x80
     fe2:	4383      	bics	r3, r0
     fe4:	4313      	orrs	r3, r2
     fe6:	2203      	movs	r2, #3
     fe8:	4022      	ands	r2, r4
     fea:	0212      	lsls	r2, r2, #8
     fec:	4803      	ldr	r0, [pc, #12]	; (ffc <system_clock_source_osc8m_set_config+0x38>)
     fee:	4003      	ands	r3, r0
     ff0:	4313      	orrs	r3, r2
     ff2:	620b      	str	r3, [r1, #32]
}
     ff4:	bd70      	pop	{r4, r5, r6, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	40000800 	.word	0x40000800
     ffc:	fffffcff 	.word	0xfffffcff

00001000 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1000:	2808      	cmp	r0, #8
    1002:	d803      	bhi.n	100c <system_clock_source_enable+0xc>
    1004:	0080      	lsls	r0, r0, #2
    1006:	4b25      	ldr	r3, [pc, #148]	; (109c <system_clock_source_enable+0x9c>)
    1008:	581b      	ldr	r3, [r3, r0]
    100a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    100c:	2017      	movs	r0, #23
    100e:	e044      	b.n	109a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1010:	4a23      	ldr	r2, [pc, #140]	; (10a0 <system_clock_source_enable+0xa0>)
    1012:	6a13      	ldr	r3, [r2, #32]
    1014:	2102      	movs	r1, #2
    1016:	430b      	orrs	r3, r1
    1018:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    101a:	2000      	movs	r0, #0
    101c:	e03d      	b.n	109a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    101e:	4a20      	ldr	r2, [pc, #128]	; (10a0 <system_clock_source_enable+0xa0>)
    1020:	6993      	ldr	r3, [r2, #24]
    1022:	2102      	movs	r1, #2
    1024:	430b      	orrs	r3, r1
    1026:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1028:	2000      	movs	r0, #0
		break;
    102a:	e036      	b.n	109a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    102c:	4a1c      	ldr	r2, [pc, #112]	; (10a0 <system_clock_source_enable+0xa0>)
    102e:	8a13      	ldrh	r3, [r2, #16]
    1030:	2102      	movs	r1, #2
    1032:	430b      	orrs	r3, r1
    1034:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1036:	2000      	movs	r0, #0
		break;
    1038:	e02f      	b.n	109a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    103a:	4a19      	ldr	r2, [pc, #100]	; (10a0 <system_clock_source_enable+0xa0>)
    103c:	8a93      	ldrh	r3, [r2, #20]
    103e:	2102      	movs	r1, #2
    1040:	430b      	orrs	r3, r1
    1042:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1044:	2000      	movs	r0, #0
		break;
    1046:	e028      	b.n	109a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1048:	4916      	ldr	r1, [pc, #88]	; (10a4 <system_clock_source_enable+0xa4>)
    104a:	680b      	ldr	r3, [r1, #0]
    104c:	2202      	movs	r2, #2
    104e:	4313      	orrs	r3, r2
    1050:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1052:	4b13      	ldr	r3, [pc, #76]	; (10a0 <system_clock_source_enable+0xa0>)
    1054:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1056:	0019      	movs	r1, r3
    1058:	320e      	adds	r2, #14
    105a:	68cb      	ldr	r3, [r1, #12]
    105c:	421a      	tst	r2, r3
    105e:	d0fc      	beq.n	105a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1060:	4a10      	ldr	r2, [pc, #64]	; (10a4 <system_clock_source_enable+0xa4>)
    1062:	6891      	ldr	r1, [r2, #8]
    1064:	4b0e      	ldr	r3, [pc, #56]	; (10a0 <system_clock_source_enable+0xa0>)
    1066:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1068:	6852      	ldr	r2, [r2, #4]
    106a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    106c:	2200      	movs	r2, #0
    106e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1070:	0019      	movs	r1, r3
    1072:	3210      	adds	r2, #16
    1074:	68cb      	ldr	r3, [r1, #12]
    1076:	421a      	tst	r2, r3
    1078:	d0fc      	beq.n	1074 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    107a:	4b0a      	ldr	r3, [pc, #40]	; (10a4 <system_clock_source_enable+0xa4>)
    107c:	681b      	ldr	r3, [r3, #0]
    107e:	b29b      	uxth	r3, r3
    1080:	4a07      	ldr	r2, [pc, #28]	; (10a0 <system_clock_source_enable+0xa0>)
    1082:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1084:	2000      	movs	r0, #0
    1086:	e008      	b.n	109a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1088:	4905      	ldr	r1, [pc, #20]	; (10a0 <system_clock_source_enable+0xa0>)
    108a:	2244      	movs	r2, #68	; 0x44
    108c:	5c8b      	ldrb	r3, [r1, r2]
    108e:	2002      	movs	r0, #2
    1090:	4303      	orrs	r3, r0
    1092:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1094:	2000      	movs	r0, #0
		break;
    1096:	e000      	b.n	109a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1098:	2000      	movs	r0, #0
}
    109a:	4770      	bx	lr
    109c:	000022e4 	.word	0x000022e4
    10a0:	40000800 	.word	0x40000800
    10a4:	200000a8 	.word	0x200000a8

000010a8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    10a8:	b530      	push	{r4, r5, lr}
    10aa:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10ac:	22c2      	movs	r2, #194	; 0xc2
    10ae:	00d2      	lsls	r2, r2, #3
    10b0:	4b1a      	ldr	r3, [pc, #104]	; (111c <system_clock_init+0x74>)
    10b2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    10b4:	4a1a      	ldr	r2, [pc, #104]	; (1120 <system_clock_init+0x78>)
    10b6:	6853      	ldr	r3, [r2, #4]
    10b8:	211e      	movs	r1, #30
    10ba:	438b      	bics	r3, r1
    10bc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    10be:	2301      	movs	r3, #1
    10c0:	466a      	mov	r2, sp
    10c2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10c4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    10c6:	4d17      	ldr	r5, [pc, #92]	; (1124 <system_clock_init+0x7c>)
    10c8:	b2e0      	uxtb	r0, r4
    10ca:	4669      	mov	r1, sp
    10cc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    10ce:	3401      	adds	r4, #1
    10d0:	2c25      	cmp	r4, #37	; 0x25
    10d2:	d1f9      	bne.n	10c8 <system_clock_init+0x20>
	config->run_in_standby  = false;
    10d4:	a803      	add	r0, sp, #12
    10d6:	2400      	movs	r4, #0
    10d8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10da:	2501      	movs	r5, #1
    10dc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10de:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10e0:	4b11      	ldr	r3, [pc, #68]	; (1128 <system_clock_init+0x80>)
    10e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10e4:	2006      	movs	r0, #6
    10e6:	4b11      	ldr	r3, [pc, #68]	; (112c <system_clock_init+0x84>)
    10e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10ea:	4b11      	ldr	r3, [pc, #68]	; (1130 <system_clock_init+0x88>)
    10ec:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    10ee:	4b11      	ldr	r3, [pc, #68]	; (1134 <system_clock_init+0x8c>)
    10f0:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    10f2:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    10f4:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    10f6:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    10f8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    10fa:	466b      	mov	r3, sp
    10fc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    10fe:	2306      	movs	r3, #6
    1100:	466a      	mov	r2, sp
    1102:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1104:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1106:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1108:	4669      	mov	r1, sp
    110a:	2000      	movs	r0, #0
    110c:	4b0a      	ldr	r3, [pc, #40]	; (1138 <system_clock_init+0x90>)
    110e:	4798      	blx	r3
    1110:	2000      	movs	r0, #0
    1112:	4b0a      	ldr	r3, [pc, #40]	; (113c <system_clock_init+0x94>)
    1114:	4798      	blx	r3
#endif
}
    1116:	b005      	add	sp, #20
    1118:	bd30      	pop	{r4, r5, pc}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	40000800 	.word	0x40000800
    1120:	41004000 	.word	0x41004000
    1124:	00001379 	.word	0x00001379
    1128:	00000fc5 	.word	0x00000fc5
    112c:	00001001 	.word	0x00001001
    1130:	00001141 	.word	0x00001141
    1134:	40000400 	.word	0x40000400
    1138:	00001165 	.word	0x00001165
    113c:	0000121d 	.word	0x0000121d

00001140 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1140:	4a06      	ldr	r2, [pc, #24]	; (115c <system_gclk_init+0x1c>)
    1142:	6993      	ldr	r3, [r2, #24]
    1144:	2108      	movs	r1, #8
    1146:	430b      	orrs	r3, r1
    1148:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    114a:	2201      	movs	r2, #1
    114c:	4b04      	ldr	r3, [pc, #16]	; (1160 <system_gclk_init+0x20>)
    114e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1150:	0019      	movs	r1, r3
    1152:	780b      	ldrb	r3, [r1, #0]
    1154:	4213      	tst	r3, r2
    1156:	d1fc      	bne.n	1152 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1158:	4770      	bx	lr
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	40000400 	.word	0x40000400
    1160:	40000c00 	.word	0x40000c00

00001164 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1164:	b570      	push	{r4, r5, r6, lr}
    1166:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1168:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    116a:	780d      	ldrb	r5, [r1, #0]
    116c:	022d      	lsls	r5, r5, #8
    116e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1170:	784b      	ldrb	r3, [r1, #1]
    1172:	2b00      	cmp	r3, #0
    1174:	d002      	beq.n	117c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1176:	2380      	movs	r3, #128	; 0x80
    1178:	02db      	lsls	r3, r3, #11
    117a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    117c:	7a4b      	ldrb	r3, [r1, #9]
    117e:	2b00      	cmp	r3, #0
    1180:	d002      	beq.n	1188 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1182:	2380      	movs	r3, #128	; 0x80
    1184:	031b      	lsls	r3, r3, #12
    1186:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1188:	6848      	ldr	r0, [r1, #4]
    118a:	2801      	cmp	r0, #1
    118c:	d910      	bls.n	11b0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    118e:	1e43      	subs	r3, r0, #1
    1190:	4218      	tst	r0, r3
    1192:	d134      	bne.n	11fe <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1194:	2802      	cmp	r0, #2
    1196:	d930      	bls.n	11fa <system_gclk_gen_set_config+0x96>
    1198:	2302      	movs	r3, #2
    119a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    119c:	3201      	adds	r2, #1
						mask <<= 1) {
    119e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    11a0:	4298      	cmp	r0, r3
    11a2:	d8fb      	bhi.n	119c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11a4:	0212      	lsls	r2, r2, #8
    11a6:	4332      	orrs	r2, r6
    11a8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11aa:	2380      	movs	r3, #128	; 0x80
    11ac:	035b      	lsls	r3, r3, #13
    11ae:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11b0:	7a0b      	ldrb	r3, [r1, #8]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d002      	beq.n	11bc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11b6:	2380      	movs	r3, #128	; 0x80
    11b8:	039b      	lsls	r3, r3, #14
    11ba:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11bc:	4a13      	ldr	r2, [pc, #76]	; (120c <system_gclk_gen_set_config+0xa8>)
    11be:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    11c0:	b25b      	sxtb	r3, r3
    11c2:	2b00      	cmp	r3, #0
    11c4:	dbfb      	blt.n	11be <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    11c6:	4b12      	ldr	r3, [pc, #72]	; (1210 <system_gclk_gen_set_config+0xac>)
    11c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11ca:	4b12      	ldr	r3, [pc, #72]	; (1214 <system_gclk_gen_set_config+0xb0>)
    11cc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ce:	4a0f      	ldr	r2, [pc, #60]	; (120c <system_gclk_gen_set_config+0xa8>)
    11d0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11d2:	b25b      	sxtb	r3, r3
    11d4:	2b00      	cmp	r3, #0
    11d6:	dbfb      	blt.n	11d0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11d8:	4b0c      	ldr	r3, [pc, #48]	; (120c <system_gclk_gen_set_config+0xa8>)
    11da:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11dc:	001a      	movs	r2, r3
    11de:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    11e0:	b25b      	sxtb	r3, r3
    11e2:	2b00      	cmp	r3, #0
    11e4:	dbfb      	blt.n	11de <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    11e6:	4a09      	ldr	r2, [pc, #36]	; (120c <system_gclk_gen_set_config+0xa8>)
    11e8:	6853      	ldr	r3, [r2, #4]
    11ea:	2180      	movs	r1, #128	; 0x80
    11ec:	0249      	lsls	r1, r1, #9
    11ee:	400b      	ands	r3, r1
    11f0:	431d      	orrs	r5, r3
    11f2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    11f4:	4b08      	ldr	r3, [pc, #32]	; (1218 <system_gclk_gen_set_config+0xb4>)
    11f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11f8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    11fa:	2200      	movs	r2, #0
    11fc:	e7d2      	b.n	11a4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    11fe:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1200:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1202:	2380      	movs	r3, #128	; 0x80
    1204:	029b      	lsls	r3, r3, #10
    1206:	431d      	orrs	r5, r3
    1208:	e7d2      	b.n	11b0 <system_gclk_gen_set_config+0x4c>
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	40000c00 	.word	0x40000c00
    1210:	00000ec1 	.word	0x00000ec1
    1214:	40000c08 	.word	0x40000c08
    1218:	00000f01 	.word	0x00000f01

0000121c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    121c:	b510      	push	{r4, lr}
    121e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1220:	4a0b      	ldr	r2, [pc, #44]	; (1250 <system_gclk_gen_enable+0x34>)
    1222:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1224:	b25b      	sxtb	r3, r3
    1226:	2b00      	cmp	r3, #0
    1228:	dbfb      	blt.n	1222 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    122a:	4b0a      	ldr	r3, [pc, #40]	; (1254 <system_gclk_gen_enable+0x38>)
    122c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    122e:	4b0a      	ldr	r3, [pc, #40]	; (1258 <system_gclk_gen_enable+0x3c>)
    1230:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1232:	4a07      	ldr	r2, [pc, #28]	; (1250 <system_gclk_gen_enable+0x34>)
    1234:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1236:	b25b      	sxtb	r3, r3
    1238:	2b00      	cmp	r3, #0
    123a:	dbfb      	blt.n	1234 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    123c:	4a04      	ldr	r2, [pc, #16]	; (1250 <system_gclk_gen_enable+0x34>)
    123e:	6851      	ldr	r1, [r2, #4]
    1240:	2380      	movs	r3, #128	; 0x80
    1242:	025b      	lsls	r3, r3, #9
    1244:	430b      	orrs	r3, r1
    1246:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1248:	4b04      	ldr	r3, [pc, #16]	; (125c <system_gclk_gen_enable+0x40>)
    124a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    124c:	bd10      	pop	{r4, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	40000c00 	.word	0x40000c00
    1254:	00000ec1 	.word	0x00000ec1
    1258:	40000c04 	.word	0x40000c04
    125c:	00000f01 	.word	0x00000f01

00001260 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1260:	b570      	push	{r4, r5, r6, lr}
    1262:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1264:	4a1a      	ldr	r2, [pc, #104]	; (12d0 <system_gclk_gen_get_hz+0x70>)
    1266:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1268:	b25b      	sxtb	r3, r3
    126a:	2b00      	cmp	r3, #0
    126c:	dbfb      	blt.n	1266 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    126e:	4b19      	ldr	r3, [pc, #100]	; (12d4 <system_gclk_gen_get_hz+0x74>)
    1270:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1272:	4b19      	ldr	r3, [pc, #100]	; (12d8 <system_gclk_gen_get_hz+0x78>)
    1274:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1276:	4a16      	ldr	r2, [pc, #88]	; (12d0 <system_gclk_gen_get_hz+0x70>)
    1278:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    127a:	b25b      	sxtb	r3, r3
    127c:	2b00      	cmp	r3, #0
    127e:	dbfb      	blt.n	1278 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1280:	4e13      	ldr	r6, [pc, #76]	; (12d0 <system_gclk_gen_get_hz+0x70>)
    1282:	6870      	ldr	r0, [r6, #4]
    1284:	04c0      	lsls	r0, r0, #19
    1286:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1288:	4b14      	ldr	r3, [pc, #80]	; (12dc <system_gclk_gen_get_hz+0x7c>)
    128a:	4798      	blx	r3
    128c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    128e:	4b12      	ldr	r3, [pc, #72]	; (12d8 <system_gclk_gen_get_hz+0x78>)
    1290:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1292:	6876      	ldr	r6, [r6, #4]
    1294:	02f6      	lsls	r6, r6, #11
    1296:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1298:	4b11      	ldr	r3, [pc, #68]	; (12e0 <system_gclk_gen_get_hz+0x80>)
    129a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    129c:	4a0c      	ldr	r2, [pc, #48]	; (12d0 <system_gclk_gen_get_hz+0x70>)
    129e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    12a0:	b25b      	sxtb	r3, r3
    12a2:	2b00      	cmp	r3, #0
    12a4:	dbfb      	blt.n	129e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    12a6:	4b0a      	ldr	r3, [pc, #40]	; (12d0 <system_gclk_gen_get_hz+0x70>)
    12a8:	689c      	ldr	r4, [r3, #8]
    12aa:	0224      	lsls	r4, r4, #8
    12ac:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    12ae:	4b0d      	ldr	r3, [pc, #52]	; (12e4 <system_gclk_gen_get_hz+0x84>)
    12b0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    12b2:	2e00      	cmp	r6, #0
    12b4:	d107      	bne.n	12c6 <system_gclk_gen_get_hz+0x66>
    12b6:	2c01      	cmp	r4, #1
    12b8:	d907      	bls.n	12ca <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    12ba:	0021      	movs	r1, r4
    12bc:	0028      	movs	r0, r5
    12be:	4b0a      	ldr	r3, [pc, #40]	; (12e8 <system_gclk_gen_get_hz+0x88>)
    12c0:	4798      	blx	r3
    12c2:	0005      	movs	r5, r0
    12c4:	e001      	b.n	12ca <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    12c6:	3401      	adds	r4, #1
    12c8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    12ca:	0028      	movs	r0, r5
    12cc:	bd70      	pop	{r4, r5, r6, pc}
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	40000c00 	.word	0x40000c00
    12d4:	00000ec1 	.word	0x00000ec1
    12d8:	40000c04 	.word	0x40000c04
    12dc:	00000f31 	.word	0x00000f31
    12e0:	40000c08 	.word	0x40000c08
    12e4:	00000f01 	.word	0x00000f01
    12e8:	00001611 	.word	0x00001611

000012ec <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    12ec:	b510      	push	{r4, lr}
    12ee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    12f0:	4b06      	ldr	r3, [pc, #24]	; (130c <system_gclk_chan_enable+0x20>)
    12f2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12f4:	4b06      	ldr	r3, [pc, #24]	; (1310 <system_gclk_chan_enable+0x24>)
    12f6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    12f8:	4a06      	ldr	r2, [pc, #24]	; (1314 <system_gclk_chan_enable+0x28>)
    12fa:	8853      	ldrh	r3, [r2, #2]
    12fc:	2180      	movs	r1, #128	; 0x80
    12fe:	01c9      	lsls	r1, r1, #7
    1300:	430b      	orrs	r3, r1
    1302:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1304:	4b04      	ldr	r3, [pc, #16]	; (1318 <system_gclk_chan_enable+0x2c>)
    1306:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1308:	bd10      	pop	{r4, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	00000ec1 	.word	0x00000ec1
    1310:	40000c02 	.word	0x40000c02
    1314:	40000c00 	.word	0x40000c00
    1318:	00000f01 	.word	0x00000f01

0000131c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    131c:	b510      	push	{r4, lr}
    131e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1320:	4b0f      	ldr	r3, [pc, #60]	; (1360 <system_gclk_chan_disable+0x44>)
    1322:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1324:	4b0f      	ldr	r3, [pc, #60]	; (1364 <system_gclk_chan_disable+0x48>)
    1326:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1328:	4a0f      	ldr	r2, [pc, #60]	; (1368 <system_gclk_chan_disable+0x4c>)
    132a:	8853      	ldrh	r3, [r2, #2]
    132c:	051b      	lsls	r3, r3, #20
    132e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1330:	8853      	ldrh	r3, [r2, #2]
    1332:	490e      	ldr	r1, [pc, #56]	; (136c <system_gclk_chan_disable+0x50>)
    1334:	400b      	ands	r3, r1
    1336:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1338:	8853      	ldrh	r3, [r2, #2]
    133a:	490d      	ldr	r1, [pc, #52]	; (1370 <system_gclk_chan_disable+0x54>)
    133c:	400b      	ands	r3, r1
    133e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1340:	0011      	movs	r1, r2
    1342:	2280      	movs	r2, #128	; 0x80
    1344:	01d2      	lsls	r2, r2, #7
    1346:	884b      	ldrh	r3, [r1, #2]
    1348:	4213      	tst	r3, r2
    134a:	d1fc      	bne.n	1346 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    134c:	4906      	ldr	r1, [pc, #24]	; (1368 <system_gclk_chan_disable+0x4c>)
    134e:	884a      	ldrh	r2, [r1, #2]
    1350:	0203      	lsls	r3, r0, #8
    1352:	4806      	ldr	r0, [pc, #24]	; (136c <system_gclk_chan_disable+0x50>)
    1354:	4002      	ands	r2, r0
    1356:	4313      	orrs	r3, r2
    1358:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    135a:	4b06      	ldr	r3, [pc, #24]	; (1374 <system_gclk_chan_disable+0x58>)
    135c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    135e:	bd10      	pop	{r4, pc}
    1360:	00000ec1 	.word	0x00000ec1
    1364:	40000c02 	.word	0x40000c02
    1368:	40000c00 	.word	0x40000c00
    136c:	fffff0ff 	.word	0xfffff0ff
    1370:	ffffbfff 	.word	0xffffbfff
    1374:	00000f01 	.word	0x00000f01

00001378 <system_gclk_chan_set_config>:
{
    1378:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    137a:	780c      	ldrb	r4, [r1, #0]
    137c:	0224      	lsls	r4, r4, #8
    137e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1380:	4b02      	ldr	r3, [pc, #8]	; (138c <system_gclk_chan_set_config+0x14>)
    1382:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1384:	b2a4      	uxth	r4, r4
    1386:	4b02      	ldr	r3, [pc, #8]	; (1390 <system_gclk_chan_set_config+0x18>)
    1388:	805c      	strh	r4, [r3, #2]
}
    138a:	bd10      	pop	{r4, pc}
    138c:	0000131d 	.word	0x0000131d
    1390:	40000c00 	.word	0x40000c00

00001394 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1394:	b510      	push	{r4, lr}
    1396:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1398:	4b06      	ldr	r3, [pc, #24]	; (13b4 <system_gclk_chan_get_hz+0x20>)
    139a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    139c:	4b06      	ldr	r3, [pc, #24]	; (13b8 <system_gclk_chan_get_hz+0x24>)
    139e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    13a0:	4b06      	ldr	r3, [pc, #24]	; (13bc <system_gclk_chan_get_hz+0x28>)
    13a2:	885c      	ldrh	r4, [r3, #2]
    13a4:	0524      	lsls	r4, r4, #20
    13a6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    13a8:	4b05      	ldr	r3, [pc, #20]	; (13c0 <system_gclk_chan_get_hz+0x2c>)
    13aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    13ac:	0020      	movs	r0, r4
    13ae:	4b05      	ldr	r3, [pc, #20]	; (13c4 <system_gclk_chan_get_hz+0x30>)
    13b0:	4798      	blx	r3
}
    13b2:	bd10      	pop	{r4, pc}
    13b4:	00000ec1 	.word	0x00000ec1
    13b8:	40000c02 	.word	0x40000c02
    13bc:	40000c00 	.word	0x40000c00
    13c0:	00000f01 	.word	0x00000f01
    13c4:	00001261 	.word	0x00001261

000013c8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    13c8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    13ca:	78d3      	ldrb	r3, [r2, #3]
    13cc:	2b00      	cmp	r3, #0
    13ce:	d135      	bne.n	143c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    13d0:	7813      	ldrb	r3, [r2, #0]
    13d2:	2b80      	cmp	r3, #128	; 0x80
    13d4:	d029      	beq.n	142a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    13d6:	061b      	lsls	r3, r3, #24
    13d8:	2480      	movs	r4, #128	; 0x80
    13da:	0264      	lsls	r4, r4, #9
    13dc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    13de:	7854      	ldrb	r4, [r2, #1]
    13e0:	2502      	movs	r5, #2
    13e2:	43ac      	bics	r4, r5
    13e4:	d106      	bne.n	13f4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    13e6:	7894      	ldrb	r4, [r2, #2]
    13e8:	2c00      	cmp	r4, #0
    13ea:	d120      	bne.n	142e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    13ec:	2480      	movs	r4, #128	; 0x80
    13ee:	02a4      	lsls	r4, r4, #10
    13f0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    13f2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13f4:	7854      	ldrb	r4, [r2, #1]
    13f6:	3c01      	subs	r4, #1
    13f8:	2c01      	cmp	r4, #1
    13fa:	d91c      	bls.n	1436 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13fc:	040d      	lsls	r5, r1, #16
    13fe:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1400:	24a0      	movs	r4, #160	; 0xa0
    1402:	05e4      	lsls	r4, r4, #23
    1404:	432c      	orrs	r4, r5
    1406:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1408:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    140a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    140c:	24d0      	movs	r4, #208	; 0xd0
    140e:	0624      	lsls	r4, r4, #24
    1410:	432c      	orrs	r4, r5
    1412:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1414:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1416:	78d4      	ldrb	r4, [r2, #3]
    1418:	2c00      	cmp	r4, #0
    141a:	d122      	bne.n	1462 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    141c:	035b      	lsls	r3, r3, #13
    141e:	d51c      	bpl.n	145a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1420:	7893      	ldrb	r3, [r2, #2]
    1422:	2b01      	cmp	r3, #1
    1424:	d01e      	beq.n	1464 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1426:	6141      	str	r1, [r0, #20]
    1428:	e017      	b.n	145a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    142a:	2300      	movs	r3, #0
    142c:	e7d7      	b.n	13de <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    142e:	24c0      	movs	r4, #192	; 0xc0
    1430:	02e4      	lsls	r4, r4, #11
    1432:	4323      	orrs	r3, r4
    1434:	e7dd      	b.n	13f2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1436:	4c0d      	ldr	r4, [pc, #52]	; (146c <_system_pinmux_config+0xa4>)
    1438:	4023      	ands	r3, r4
    143a:	e7df      	b.n	13fc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    143c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    143e:	040c      	lsls	r4, r1, #16
    1440:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1442:	23a0      	movs	r3, #160	; 0xa0
    1444:	05db      	lsls	r3, r3, #23
    1446:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1448:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    144a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    144c:	23d0      	movs	r3, #208	; 0xd0
    144e:	061b      	lsls	r3, r3, #24
    1450:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1452:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1454:	78d3      	ldrb	r3, [r2, #3]
    1456:	2b00      	cmp	r3, #0
    1458:	d103      	bne.n	1462 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    145a:	7853      	ldrb	r3, [r2, #1]
    145c:	3b01      	subs	r3, #1
    145e:	2b01      	cmp	r3, #1
    1460:	d902      	bls.n	1468 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1462:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1464:	6181      	str	r1, [r0, #24]
    1466:	e7f8      	b.n	145a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1468:	6081      	str	r1, [r0, #8]
}
    146a:	e7fa      	b.n	1462 <_system_pinmux_config+0x9a>
    146c:	fffbffff 	.word	0xfffbffff

00001470 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1470:	b510      	push	{r4, lr}
    1472:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1474:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1476:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1478:	2900      	cmp	r1, #0
    147a:	d104      	bne.n	1486 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    147c:	0943      	lsrs	r3, r0, #5
    147e:	01db      	lsls	r3, r3, #7
    1480:	4905      	ldr	r1, [pc, #20]	; (1498 <system_pinmux_pin_set_config+0x28>)
    1482:	468c      	mov	ip, r1
    1484:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1486:	241f      	movs	r4, #31
    1488:	4020      	ands	r0, r4
    148a:	2101      	movs	r1, #1
    148c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    148e:	0018      	movs	r0, r3
    1490:	4b02      	ldr	r3, [pc, #8]	; (149c <system_pinmux_pin_set_config+0x2c>)
    1492:	4798      	blx	r3
}
    1494:	bd10      	pop	{r4, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	41004400 	.word	0x41004400
    149c:	000013c9 	.word	0x000013c9

000014a0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    14a0:	4770      	bx	lr
	...

000014a4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    14a4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    14a6:	4b05      	ldr	r3, [pc, #20]	; (14bc <system_init+0x18>)
    14a8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    14aa:	4b05      	ldr	r3, [pc, #20]	; (14c0 <system_init+0x1c>)
    14ac:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    14ae:	4b05      	ldr	r3, [pc, #20]	; (14c4 <system_init+0x20>)
    14b0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    14b2:	4b05      	ldr	r3, [pc, #20]	; (14c8 <system_init+0x24>)
    14b4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    14b6:	4b05      	ldr	r3, [pc, #20]	; (14cc <system_init+0x28>)
    14b8:	4798      	blx	r3
}
    14ba:	bd10      	pop	{r4, pc}
    14bc:	000010a9 	.word	0x000010a9
    14c0:	00000eb5 	.word	0x00000eb5
    14c4:	000014a1 	.word	0x000014a1
    14c8:	000001f1 	.word	0x000001f1
    14cc:	000014a1 	.word	0x000014a1

000014d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    14d0:	e7fe      	b.n	14d0 <Dummy_Handler>
	...

000014d4 <Reset_Handler>:
{
    14d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    14d6:	4a2a      	ldr	r2, [pc, #168]	; (1580 <Reset_Handler+0xac>)
    14d8:	4b2a      	ldr	r3, [pc, #168]	; (1584 <Reset_Handler+0xb0>)
    14da:	429a      	cmp	r2, r3
    14dc:	d011      	beq.n	1502 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    14de:	001a      	movs	r2, r3
    14e0:	4b29      	ldr	r3, [pc, #164]	; (1588 <Reset_Handler+0xb4>)
    14e2:	429a      	cmp	r2, r3
    14e4:	d20d      	bcs.n	1502 <Reset_Handler+0x2e>
    14e6:	4a29      	ldr	r2, [pc, #164]	; (158c <Reset_Handler+0xb8>)
    14e8:	3303      	adds	r3, #3
    14ea:	1a9b      	subs	r3, r3, r2
    14ec:	089b      	lsrs	r3, r3, #2
    14ee:	3301      	adds	r3, #1
    14f0:	009b      	lsls	r3, r3, #2
    14f2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    14f4:	4823      	ldr	r0, [pc, #140]	; (1584 <Reset_Handler+0xb0>)
    14f6:	4922      	ldr	r1, [pc, #136]	; (1580 <Reset_Handler+0xac>)
    14f8:	588c      	ldr	r4, [r1, r2]
    14fa:	5084      	str	r4, [r0, r2]
    14fc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    14fe:	429a      	cmp	r2, r3
    1500:	d1fa      	bne.n	14f8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1502:	4a23      	ldr	r2, [pc, #140]	; (1590 <Reset_Handler+0xbc>)
    1504:	4b23      	ldr	r3, [pc, #140]	; (1594 <Reset_Handler+0xc0>)
    1506:	429a      	cmp	r2, r3
    1508:	d20a      	bcs.n	1520 <Reset_Handler+0x4c>
    150a:	43d3      	mvns	r3, r2
    150c:	4921      	ldr	r1, [pc, #132]	; (1594 <Reset_Handler+0xc0>)
    150e:	185b      	adds	r3, r3, r1
    1510:	2103      	movs	r1, #3
    1512:	438b      	bics	r3, r1
    1514:	3304      	adds	r3, #4
    1516:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1518:	2100      	movs	r1, #0
    151a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    151c:	4293      	cmp	r3, r2
    151e:	d1fc      	bne.n	151a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1520:	4a1d      	ldr	r2, [pc, #116]	; (1598 <Reset_Handler+0xc4>)
    1522:	21ff      	movs	r1, #255	; 0xff
    1524:	4b1d      	ldr	r3, [pc, #116]	; (159c <Reset_Handler+0xc8>)
    1526:	438b      	bics	r3, r1
    1528:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    152a:	39fd      	subs	r1, #253	; 0xfd
    152c:	2390      	movs	r3, #144	; 0x90
    152e:	005b      	lsls	r3, r3, #1
    1530:	4a1b      	ldr	r2, [pc, #108]	; (15a0 <Reset_Handler+0xcc>)
    1532:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1534:	4a1b      	ldr	r2, [pc, #108]	; (15a4 <Reset_Handler+0xd0>)
    1536:	78d3      	ldrb	r3, [r2, #3]
    1538:	2503      	movs	r5, #3
    153a:	43ab      	bics	r3, r5
    153c:	2402      	movs	r4, #2
    153e:	4323      	orrs	r3, r4
    1540:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1542:	78d3      	ldrb	r3, [r2, #3]
    1544:	270c      	movs	r7, #12
    1546:	43bb      	bics	r3, r7
    1548:	2608      	movs	r6, #8
    154a:	4333      	orrs	r3, r6
    154c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    154e:	4b16      	ldr	r3, [pc, #88]	; (15a8 <Reset_Handler+0xd4>)
    1550:	7b98      	ldrb	r0, [r3, #14]
    1552:	2230      	movs	r2, #48	; 0x30
    1554:	4390      	bics	r0, r2
    1556:	2220      	movs	r2, #32
    1558:	4310      	orrs	r0, r2
    155a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    155c:	7b99      	ldrb	r1, [r3, #14]
    155e:	43b9      	bics	r1, r7
    1560:	4331      	orrs	r1, r6
    1562:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1564:	7b9a      	ldrb	r2, [r3, #14]
    1566:	43aa      	bics	r2, r5
    1568:	4322      	orrs	r2, r4
    156a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    156c:	4a0f      	ldr	r2, [pc, #60]	; (15ac <Reset_Handler+0xd8>)
    156e:	6853      	ldr	r3, [r2, #4]
    1570:	2180      	movs	r1, #128	; 0x80
    1572:	430b      	orrs	r3, r1
    1574:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1576:	4b0e      	ldr	r3, [pc, #56]	; (15b0 <Reset_Handler+0xdc>)
    1578:	4798      	blx	r3
        main();
    157a:	4b0e      	ldr	r3, [pc, #56]	; (15b4 <Reset_Handler+0xe0>)
    157c:	4798      	blx	r3
    157e:	e7fe      	b.n	157e <Reset_Handler+0xaa>
    1580:	0000239c 	.word	0x0000239c
    1584:	20000000 	.word	0x20000000
    1588:	20000068 	.word	0x20000068
    158c:	20000004 	.word	0x20000004
    1590:	20000068 	.word	0x20000068
    1594:	2000017c 	.word	0x2000017c
    1598:	e000ed00 	.word	0xe000ed00
    159c:	00000000 	.word	0x00000000
    15a0:	41007000 	.word	0x41007000
    15a4:	41005000 	.word	0x41005000
    15a8:	41004800 	.word	0x41004800
    15ac:	41004000 	.word	0x41004000
    15b0:	0000177d 	.word	0x0000177d
    15b4:	000015f5 	.word	0x000015f5

000015b8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    15b8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    15ba:	4a06      	ldr	r2, [pc, #24]	; (15d4 <_sbrk+0x1c>)
    15bc:	6812      	ldr	r2, [r2, #0]
    15be:	2a00      	cmp	r2, #0
    15c0:	d004      	beq.n	15cc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    15c2:	4a04      	ldr	r2, [pc, #16]	; (15d4 <_sbrk+0x1c>)
    15c4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    15c6:	18c3      	adds	r3, r0, r3
    15c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    15ca:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    15cc:	4902      	ldr	r1, [pc, #8]	; (15d8 <_sbrk+0x20>)
    15ce:	4a01      	ldr	r2, [pc, #4]	; (15d4 <_sbrk+0x1c>)
    15d0:	6011      	str	r1, [r2, #0]
    15d2:	e7f6      	b.n	15c2 <_sbrk+0xa>
    15d4:	200000c0 	.word	0x200000c0
    15d8:	20002180 	.word	0x20002180

000015dc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    15dc:	2001      	movs	r0, #1
    15de:	4240      	negs	r0, r0
    15e0:	4770      	bx	lr

000015e2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    15e2:	2380      	movs	r3, #128	; 0x80
    15e4:	019b      	lsls	r3, r3, #6
    15e6:	604b      	str	r3, [r1, #4]

	return 0;
}
    15e8:	2000      	movs	r0, #0
    15ea:	4770      	bx	lr

000015ec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    15ec:	2001      	movs	r0, #1
    15ee:	4770      	bx	lr

000015f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    15f0:	2000      	movs	r0, #0
    15f2:	4770      	bx	lr

000015f4 <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
    15f4:	b510      	push	{r4, lr}
    // ASF system and board initialization
	system_init();
    15f6:	4b03      	ldr	r3, [pc, #12]	; (1604 <main+0x10>)
    15f8:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
    printf("Hello World!\r\n");
    15fa:	4803      	ldr	r0, [pc, #12]	; (1608 <main+0x14>)
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <main+0x18>)
    15fe:	4798      	blx	r3
    
}
    1600:	2000      	movs	r0, #0
    1602:	bd10      	pop	{r4, pc}
    1604:	000014a5 	.word	0x000014a5
    1608:	00002308 	.word	0x00002308
    160c:	00001895 	.word	0x00001895

00001610 <__udivsi3>:
    1610:	2200      	movs	r2, #0
    1612:	0843      	lsrs	r3, r0, #1
    1614:	428b      	cmp	r3, r1
    1616:	d374      	bcc.n	1702 <__udivsi3+0xf2>
    1618:	0903      	lsrs	r3, r0, #4
    161a:	428b      	cmp	r3, r1
    161c:	d35f      	bcc.n	16de <__udivsi3+0xce>
    161e:	0a03      	lsrs	r3, r0, #8
    1620:	428b      	cmp	r3, r1
    1622:	d344      	bcc.n	16ae <__udivsi3+0x9e>
    1624:	0b03      	lsrs	r3, r0, #12
    1626:	428b      	cmp	r3, r1
    1628:	d328      	bcc.n	167c <__udivsi3+0x6c>
    162a:	0c03      	lsrs	r3, r0, #16
    162c:	428b      	cmp	r3, r1
    162e:	d30d      	bcc.n	164c <__udivsi3+0x3c>
    1630:	22ff      	movs	r2, #255	; 0xff
    1632:	0209      	lsls	r1, r1, #8
    1634:	ba12      	rev	r2, r2
    1636:	0c03      	lsrs	r3, r0, #16
    1638:	428b      	cmp	r3, r1
    163a:	d302      	bcc.n	1642 <__udivsi3+0x32>
    163c:	1212      	asrs	r2, r2, #8
    163e:	0209      	lsls	r1, r1, #8
    1640:	d065      	beq.n	170e <__udivsi3+0xfe>
    1642:	0b03      	lsrs	r3, r0, #12
    1644:	428b      	cmp	r3, r1
    1646:	d319      	bcc.n	167c <__udivsi3+0x6c>
    1648:	e000      	b.n	164c <__udivsi3+0x3c>
    164a:	0a09      	lsrs	r1, r1, #8
    164c:	0bc3      	lsrs	r3, r0, #15
    164e:	428b      	cmp	r3, r1
    1650:	d301      	bcc.n	1656 <__udivsi3+0x46>
    1652:	03cb      	lsls	r3, r1, #15
    1654:	1ac0      	subs	r0, r0, r3
    1656:	4152      	adcs	r2, r2
    1658:	0b83      	lsrs	r3, r0, #14
    165a:	428b      	cmp	r3, r1
    165c:	d301      	bcc.n	1662 <__udivsi3+0x52>
    165e:	038b      	lsls	r3, r1, #14
    1660:	1ac0      	subs	r0, r0, r3
    1662:	4152      	adcs	r2, r2
    1664:	0b43      	lsrs	r3, r0, #13
    1666:	428b      	cmp	r3, r1
    1668:	d301      	bcc.n	166e <__udivsi3+0x5e>
    166a:	034b      	lsls	r3, r1, #13
    166c:	1ac0      	subs	r0, r0, r3
    166e:	4152      	adcs	r2, r2
    1670:	0b03      	lsrs	r3, r0, #12
    1672:	428b      	cmp	r3, r1
    1674:	d301      	bcc.n	167a <__udivsi3+0x6a>
    1676:	030b      	lsls	r3, r1, #12
    1678:	1ac0      	subs	r0, r0, r3
    167a:	4152      	adcs	r2, r2
    167c:	0ac3      	lsrs	r3, r0, #11
    167e:	428b      	cmp	r3, r1
    1680:	d301      	bcc.n	1686 <__udivsi3+0x76>
    1682:	02cb      	lsls	r3, r1, #11
    1684:	1ac0      	subs	r0, r0, r3
    1686:	4152      	adcs	r2, r2
    1688:	0a83      	lsrs	r3, r0, #10
    168a:	428b      	cmp	r3, r1
    168c:	d301      	bcc.n	1692 <__udivsi3+0x82>
    168e:	028b      	lsls	r3, r1, #10
    1690:	1ac0      	subs	r0, r0, r3
    1692:	4152      	adcs	r2, r2
    1694:	0a43      	lsrs	r3, r0, #9
    1696:	428b      	cmp	r3, r1
    1698:	d301      	bcc.n	169e <__udivsi3+0x8e>
    169a:	024b      	lsls	r3, r1, #9
    169c:	1ac0      	subs	r0, r0, r3
    169e:	4152      	adcs	r2, r2
    16a0:	0a03      	lsrs	r3, r0, #8
    16a2:	428b      	cmp	r3, r1
    16a4:	d301      	bcc.n	16aa <__udivsi3+0x9a>
    16a6:	020b      	lsls	r3, r1, #8
    16a8:	1ac0      	subs	r0, r0, r3
    16aa:	4152      	adcs	r2, r2
    16ac:	d2cd      	bcs.n	164a <__udivsi3+0x3a>
    16ae:	09c3      	lsrs	r3, r0, #7
    16b0:	428b      	cmp	r3, r1
    16b2:	d301      	bcc.n	16b8 <__udivsi3+0xa8>
    16b4:	01cb      	lsls	r3, r1, #7
    16b6:	1ac0      	subs	r0, r0, r3
    16b8:	4152      	adcs	r2, r2
    16ba:	0983      	lsrs	r3, r0, #6
    16bc:	428b      	cmp	r3, r1
    16be:	d301      	bcc.n	16c4 <__udivsi3+0xb4>
    16c0:	018b      	lsls	r3, r1, #6
    16c2:	1ac0      	subs	r0, r0, r3
    16c4:	4152      	adcs	r2, r2
    16c6:	0943      	lsrs	r3, r0, #5
    16c8:	428b      	cmp	r3, r1
    16ca:	d301      	bcc.n	16d0 <__udivsi3+0xc0>
    16cc:	014b      	lsls	r3, r1, #5
    16ce:	1ac0      	subs	r0, r0, r3
    16d0:	4152      	adcs	r2, r2
    16d2:	0903      	lsrs	r3, r0, #4
    16d4:	428b      	cmp	r3, r1
    16d6:	d301      	bcc.n	16dc <__udivsi3+0xcc>
    16d8:	010b      	lsls	r3, r1, #4
    16da:	1ac0      	subs	r0, r0, r3
    16dc:	4152      	adcs	r2, r2
    16de:	08c3      	lsrs	r3, r0, #3
    16e0:	428b      	cmp	r3, r1
    16e2:	d301      	bcc.n	16e8 <__udivsi3+0xd8>
    16e4:	00cb      	lsls	r3, r1, #3
    16e6:	1ac0      	subs	r0, r0, r3
    16e8:	4152      	adcs	r2, r2
    16ea:	0883      	lsrs	r3, r0, #2
    16ec:	428b      	cmp	r3, r1
    16ee:	d301      	bcc.n	16f4 <__udivsi3+0xe4>
    16f0:	008b      	lsls	r3, r1, #2
    16f2:	1ac0      	subs	r0, r0, r3
    16f4:	4152      	adcs	r2, r2
    16f6:	0843      	lsrs	r3, r0, #1
    16f8:	428b      	cmp	r3, r1
    16fa:	d301      	bcc.n	1700 <__udivsi3+0xf0>
    16fc:	004b      	lsls	r3, r1, #1
    16fe:	1ac0      	subs	r0, r0, r3
    1700:	4152      	adcs	r2, r2
    1702:	1a41      	subs	r1, r0, r1
    1704:	d200      	bcs.n	1708 <__udivsi3+0xf8>
    1706:	4601      	mov	r1, r0
    1708:	4152      	adcs	r2, r2
    170a:	4610      	mov	r0, r2
    170c:	4770      	bx	lr
    170e:	e7ff      	b.n	1710 <__udivsi3+0x100>
    1710:	b501      	push	{r0, lr}
    1712:	2000      	movs	r0, #0
    1714:	f000 f806 	bl	1724 <__aeabi_idiv0>
    1718:	bd02      	pop	{r1, pc}
    171a:	46c0      	nop			; (mov r8, r8)

0000171c <__aeabi_uidivmod>:
    171c:	2900      	cmp	r1, #0
    171e:	d0f7      	beq.n	1710 <__udivsi3+0x100>
    1720:	e776      	b.n	1610 <__udivsi3>
    1722:	4770      	bx	lr

00001724 <__aeabi_idiv0>:
    1724:	4770      	bx	lr
    1726:	46c0      	nop			; (mov r8, r8)

00001728 <__aeabi_lmul>:
    1728:	b5f0      	push	{r4, r5, r6, r7, lr}
    172a:	46ce      	mov	lr, r9
    172c:	4647      	mov	r7, r8
    172e:	0415      	lsls	r5, r2, #16
    1730:	0c2d      	lsrs	r5, r5, #16
    1732:	002e      	movs	r6, r5
    1734:	b580      	push	{r7, lr}
    1736:	0407      	lsls	r7, r0, #16
    1738:	0c14      	lsrs	r4, r2, #16
    173a:	0c3f      	lsrs	r7, r7, #16
    173c:	4699      	mov	r9, r3
    173e:	0c03      	lsrs	r3, r0, #16
    1740:	437e      	muls	r6, r7
    1742:	435d      	muls	r5, r3
    1744:	4367      	muls	r7, r4
    1746:	4363      	muls	r3, r4
    1748:	197f      	adds	r7, r7, r5
    174a:	0c34      	lsrs	r4, r6, #16
    174c:	19e4      	adds	r4, r4, r7
    174e:	469c      	mov	ip, r3
    1750:	42a5      	cmp	r5, r4
    1752:	d903      	bls.n	175c <__aeabi_lmul+0x34>
    1754:	2380      	movs	r3, #128	; 0x80
    1756:	025b      	lsls	r3, r3, #9
    1758:	4698      	mov	r8, r3
    175a:	44c4      	add	ip, r8
    175c:	464b      	mov	r3, r9
    175e:	4351      	muls	r1, r2
    1760:	4343      	muls	r3, r0
    1762:	0436      	lsls	r6, r6, #16
    1764:	0c36      	lsrs	r6, r6, #16
    1766:	0c25      	lsrs	r5, r4, #16
    1768:	0424      	lsls	r4, r4, #16
    176a:	4465      	add	r5, ip
    176c:	19a4      	adds	r4, r4, r6
    176e:	1859      	adds	r1, r3, r1
    1770:	1949      	adds	r1, r1, r5
    1772:	0020      	movs	r0, r4
    1774:	bc0c      	pop	{r2, r3}
    1776:	4690      	mov	r8, r2
    1778:	4699      	mov	r9, r3
    177a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000177c <__libc_init_array>:
    177c:	b570      	push	{r4, r5, r6, lr}
    177e:	2600      	movs	r6, #0
    1780:	4d0c      	ldr	r5, [pc, #48]	; (17b4 <__libc_init_array+0x38>)
    1782:	4c0d      	ldr	r4, [pc, #52]	; (17b8 <__libc_init_array+0x3c>)
    1784:	1b64      	subs	r4, r4, r5
    1786:	10a4      	asrs	r4, r4, #2
    1788:	42a6      	cmp	r6, r4
    178a:	d109      	bne.n	17a0 <__libc_init_array+0x24>
    178c:	2600      	movs	r6, #0
    178e:	f000 fdf5 	bl	237c <_init>
    1792:	4d0a      	ldr	r5, [pc, #40]	; (17bc <__libc_init_array+0x40>)
    1794:	4c0a      	ldr	r4, [pc, #40]	; (17c0 <__libc_init_array+0x44>)
    1796:	1b64      	subs	r4, r4, r5
    1798:	10a4      	asrs	r4, r4, #2
    179a:	42a6      	cmp	r6, r4
    179c:	d105      	bne.n	17aa <__libc_init_array+0x2e>
    179e:	bd70      	pop	{r4, r5, r6, pc}
    17a0:	00b3      	lsls	r3, r6, #2
    17a2:	58eb      	ldr	r3, [r5, r3]
    17a4:	4798      	blx	r3
    17a6:	3601      	adds	r6, #1
    17a8:	e7ee      	b.n	1788 <__libc_init_array+0xc>
    17aa:	00b3      	lsls	r3, r6, #2
    17ac:	58eb      	ldr	r3, [r5, r3]
    17ae:	4798      	blx	r3
    17b0:	3601      	adds	r6, #1
    17b2:	e7f2      	b.n	179a <__libc_init_array+0x1e>
    17b4:	00002388 	.word	0x00002388
    17b8:	00002388 	.word	0x00002388
    17bc:	00002388 	.word	0x00002388
    17c0:	0000238c 	.word	0x0000238c

000017c4 <memset>:
    17c4:	0003      	movs	r3, r0
    17c6:	1882      	adds	r2, r0, r2
    17c8:	4293      	cmp	r3, r2
    17ca:	d100      	bne.n	17ce <memset+0xa>
    17cc:	4770      	bx	lr
    17ce:	7019      	strb	r1, [r3, #0]
    17d0:	3301      	adds	r3, #1
    17d2:	e7f9      	b.n	17c8 <memset+0x4>

000017d4 <_puts_r>:
    17d4:	b570      	push	{r4, r5, r6, lr}
    17d6:	0005      	movs	r5, r0
    17d8:	000e      	movs	r6, r1
    17da:	2800      	cmp	r0, #0
    17dc:	d004      	beq.n	17e8 <_puts_r+0x14>
    17de:	6983      	ldr	r3, [r0, #24]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d101      	bne.n	17e8 <_puts_r+0x14>
    17e4:	f000 fada 	bl	1d9c <__sinit>
    17e8:	69ab      	ldr	r3, [r5, #24]
    17ea:	68ac      	ldr	r4, [r5, #8]
    17ec:	2b00      	cmp	r3, #0
    17ee:	d102      	bne.n	17f6 <_puts_r+0x22>
    17f0:	0028      	movs	r0, r5
    17f2:	f000 fad3 	bl	1d9c <__sinit>
    17f6:	4b24      	ldr	r3, [pc, #144]	; (1888 <_puts_r+0xb4>)
    17f8:	429c      	cmp	r4, r3
    17fa:	d10f      	bne.n	181c <_puts_r+0x48>
    17fc:	686c      	ldr	r4, [r5, #4]
    17fe:	89a3      	ldrh	r3, [r4, #12]
    1800:	071b      	lsls	r3, r3, #28
    1802:	d502      	bpl.n	180a <_puts_r+0x36>
    1804:	6923      	ldr	r3, [r4, #16]
    1806:	2b00      	cmp	r3, #0
    1808:	d120      	bne.n	184c <_puts_r+0x78>
    180a:	0021      	movs	r1, r4
    180c:	0028      	movs	r0, r5
    180e:	f000 f957 	bl	1ac0 <__swsetup_r>
    1812:	2800      	cmp	r0, #0
    1814:	d01a      	beq.n	184c <_puts_r+0x78>
    1816:	2001      	movs	r0, #1
    1818:	4240      	negs	r0, r0
    181a:	bd70      	pop	{r4, r5, r6, pc}
    181c:	4b1b      	ldr	r3, [pc, #108]	; (188c <_puts_r+0xb8>)
    181e:	429c      	cmp	r4, r3
    1820:	d101      	bne.n	1826 <_puts_r+0x52>
    1822:	68ac      	ldr	r4, [r5, #8]
    1824:	e7eb      	b.n	17fe <_puts_r+0x2a>
    1826:	4b1a      	ldr	r3, [pc, #104]	; (1890 <_puts_r+0xbc>)
    1828:	429c      	cmp	r4, r3
    182a:	d1e8      	bne.n	17fe <_puts_r+0x2a>
    182c:	68ec      	ldr	r4, [r5, #12]
    182e:	e7e6      	b.n	17fe <_puts_r+0x2a>
    1830:	3b01      	subs	r3, #1
    1832:	3601      	adds	r6, #1
    1834:	60a3      	str	r3, [r4, #8]
    1836:	2b00      	cmp	r3, #0
    1838:	da04      	bge.n	1844 <_puts_r+0x70>
    183a:	69a2      	ldr	r2, [r4, #24]
    183c:	4293      	cmp	r3, r2
    183e:	db16      	blt.n	186e <_puts_r+0x9a>
    1840:	290a      	cmp	r1, #10
    1842:	d014      	beq.n	186e <_puts_r+0x9a>
    1844:	6823      	ldr	r3, [r4, #0]
    1846:	1c5a      	adds	r2, r3, #1
    1848:	6022      	str	r2, [r4, #0]
    184a:	7019      	strb	r1, [r3, #0]
    184c:	7831      	ldrb	r1, [r6, #0]
    184e:	68a3      	ldr	r3, [r4, #8]
    1850:	2900      	cmp	r1, #0
    1852:	d1ed      	bne.n	1830 <_puts_r+0x5c>
    1854:	3b01      	subs	r3, #1
    1856:	60a3      	str	r3, [r4, #8]
    1858:	2b00      	cmp	r3, #0
    185a:	da0f      	bge.n	187c <_puts_r+0xa8>
    185c:	0022      	movs	r2, r4
    185e:	310a      	adds	r1, #10
    1860:	0028      	movs	r0, r5
    1862:	f000 f8d7 	bl	1a14 <__swbuf_r>
    1866:	1c43      	adds	r3, r0, #1
    1868:	d0d5      	beq.n	1816 <_puts_r+0x42>
    186a:	200a      	movs	r0, #10
    186c:	e7d5      	b.n	181a <_puts_r+0x46>
    186e:	0022      	movs	r2, r4
    1870:	0028      	movs	r0, r5
    1872:	f000 f8cf 	bl	1a14 <__swbuf_r>
    1876:	1c43      	adds	r3, r0, #1
    1878:	d1e8      	bne.n	184c <_puts_r+0x78>
    187a:	e7cc      	b.n	1816 <_puts_r+0x42>
    187c:	200a      	movs	r0, #10
    187e:	6823      	ldr	r3, [r4, #0]
    1880:	1c5a      	adds	r2, r3, #1
    1882:	6022      	str	r2, [r4, #0]
    1884:	7018      	strb	r0, [r3, #0]
    1886:	e7c8      	b.n	181a <_puts_r+0x46>
    1888:	0000233c 	.word	0x0000233c
    188c:	0000235c 	.word	0x0000235c
    1890:	0000231c 	.word	0x0000231c

00001894 <puts>:
    1894:	b510      	push	{r4, lr}
    1896:	4b03      	ldr	r3, [pc, #12]	; (18a4 <puts+0x10>)
    1898:	0001      	movs	r1, r0
    189a:	6818      	ldr	r0, [r3, #0]
    189c:	f7ff ff9a 	bl	17d4 <_puts_r>
    18a0:	bd10      	pop	{r4, pc}
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	20000004 	.word	0x20000004

000018a8 <setbuf>:
    18a8:	424a      	negs	r2, r1
    18aa:	414a      	adcs	r2, r1
    18ac:	2380      	movs	r3, #128	; 0x80
    18ae:	b510      	push	{r4, lr}
    18b0:	0052      	lsls	r2, r2, #1
    18b2:	00db      	lsls	r3, r3, #3
    18b4:	f000 f802 	bl	18bc <setvbuf>
    18b8:	bd10      	pop	{r4, pc}
	...

000018bc <setvbuf>:
    18bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18be:	001d      	movs	r5, r3
    18c0:	4b4f      	ldr	r3, [pc, #316]	; (1a00 <setvbuf+0x144>)
    18c2:	b085      	sub	sp, #20
    18c4:	681e      	ldr	r6, [r3, #0]
    18c6:	0004      	movs	r4, r0
    18c8:	000f      	movs	r7, r1
    18ca:	9200      	str	r2, [sp, #0]
    18cc:	2e00      	cmp	r6, #0
    18ce:	d005      	beq.n	18dc <setvbuf+0x20>
    18d0:	69b3      	ldr	r3, [r6, #24]
    18d2:	2b00      	cmp	r3, #0
    18d4:	d102      	bne.n	18dc <setvbuf+0x20>
    18d6:	0030      	movs	r0, r6
    18d8:	f000 fa60 	bl	1d9c <__sinit>
    18dc:	4b49      	ldr	r3, [pc, #292]	; (1a04 <setvbuf+0x148>)
    18de:	429c      	cmp	r4, r3
    18e0:	d150      	bne.n	1984 <setvbuf+0xc8>
    18e2:	6874      	ldr	r4, [r6, #4]
    18e4:	9b00      	ldr	r3, [sp, #0]
    18e6:	2b02      	cmp	r3, #2
    18e8:	d005      	beq.n	18f6 <setvbuf+0x3a>
    18ea:	2b01      	cmp	r3, #1
    18ec:	d900      	bls.n	18f0 <setvbuf+0x34>
    18ee:	e084      	b.n	19fa <setvbuf+0x13e>
    18f0:	2d00      	cmp	r5, #0
    18f2:	da00      	bge.n	18f6 <setvbuf+0x3a>
    18f4:	e081      	b.n	19fa <setvbuf+0x13e>
    18f6:	0021      	movs	r1, r4
    18f8:	0030      	movs	r0, r6
    18fa:	f000 f9e1 	bl	1cc0 <_fflush_r>
    18fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1900:	2900      	cmp	r1, #0
    1902:	d008      	beq.n	1916 <setvbuf+0x5a>
    1904:	0023      	movs	r3, r4
    1906:	3344      	adds	r3, #68	; 0x44
    1908:	4299      	cmp	r1, r3
    190a:	d002      	beq.n	1912 <setvbuf+0x56>
    190c:	0030      	movs	r0, r6
    190e:	f000 fb51 	bl	1fb4 <_free_r>
    1912:	2300      	movs	r3, #0
    1914:	6363      	str	r3, [r4, #52]	; 0x34
    1916:	2300      	movs	r3, #0
    1918:	61a3      	str	r3, [r4, #24]
    191a:	6063      	str	r3, [r4, #4]
    191c:	89a3      	ldrh	r3, [r4, #12]
    191e:	061b      	lsls	r3, r3, #24
    1920:	d503      	bpl.n	192a <setvbuf+0x6e>
    1922:	6921      	ldr	r1, [r4, #16]
    1924:	0030      	movs	r0, r6
    1926:	f000 fb45 	bl	1fb4 <_free_r>
    192a:	89a3      	ldrh	r3, [r4, #12]
    192c:	4a36      	ldr	r2, [pc, #216]	; (1a08 <setvbuf+0x14c>)
    192e:	4013      	ands	r3, r2
    1930:	81a3      	strh	r3, [r4, #12]
    1932:	9b00      	ldr	r3, [sp, #0]
    1934:	2b02      	cmp	r3, #2
    1936:	d05a      	beq.n	19ee <setvbuf+0x132>
    1938:	ab03      	add	r3, sp, #12
    193a:	aa02      	add	r2, sp, #8
    193c:	0021      	movs	r1, r4
    193e:	0030      	movs	r0, r6
    1940:	f000 fac2 	bl	1ec8 <__swhatbuf_r>
    1944:	89a3      	ldrh	r3, [r4, #12]
    1946:	4318      	orrs	r0, r3
    1948:	81a0      	strh	r0, [r4, #12]
    194a:	2d00      	cmp	r5, #0
    194c:	d124      	bne.n	1998 <setvbuf+0xdc>
    194e:	9d02      	ldr	r5, [sp, #8]
    1950:	0028      	movs	r0, r5
    1952:	f000 fb25 	bl	1fa0 <malloc>
    1956:	9501      	str	r5, [sp, #4]
    1958:	1e07      	subs	r7, r0, #0
    195a:	d142      	bne.n	19e2 <setvbuf+0x126>
    195c:	9b02      	ldr	r3, [sp, #8]
    195e:	9301      	str	r3, [sp, #4]
    1960:	42ab      	cmp	r3, r5
    1962:	d139      	bne.n	19d8 <setvbuf+0x11c>
    1964:	2001      	movs	r0, #1
    1966:	4240      	negs	r0, r0
    1968:	2302      	movs	r3, #2
    196a:	89a2      	ldrh	r2, [r4, #12]
    196c:	4313      	orrs	r3, r2
    196e:	81a3      	strh	r3, [r4, #12]
    1970:	2300      	movs	r3, #0
    1972:	60a3      	str	r3, [r4, #8]
    1974:	0023      	movs	r3, r4
    1976:	3347      	adds	r3, #71	; 0x47
    1978:	6023      	str	r3, [r4, #0]
    197a:	6123      	str	r3, [r4, #16]
    197c:	2301      	movs	r3, #1
    197e:	6163      	str	r3, [r4, #20]
    1980:	b005      	add	sp, #20
    1982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1984:	4b21      	ldr	r3, [pc, #132]	; (1a0c <setvbuf+0x150>)
    1986:	429c      	cmp	r4, r3
    1988:	d101      	bne.n	198e <setvbuf+0xd2>
    198a:	68b4      	ldr	r4, [r6, #8]
    198c:	e7aa      	b.n	18e4 <setvbuf+0x28>
    198e:	4b20      	ldr	r3, [pc, #128]	; (1a10 <setvbuf+0x154>)
    1990:	429c      	cmp	r4, r3
    1992:	d1a7      	bne.n	18e4 <setvbuf+0x28>
    1994:	68f4      	ldr	r4, [r6, #12]
    1996:	e7a5      	b.n	18e4 <setvbuf+0x28>
    1998:	2f00      	cmp	r7, #0
    199a:	d0d9      	beq.n	1950 <setvbuf+0x94>
    199c:	69b3      	ldr	r3, [r6, #24]
    199e:	2b00      	cmp	r3, #0
    19a0:	d102      	bne.n	19a8 <setvbuf+0xec>
    19a2:	0030      	movs	r0, r6
    19a4:	f000 f9fa 	bl	1d9c <__sinit>
    19a8:	9b00      	ldr	r3, [sp, #0]
    19aa:	2b01      	cmp	r3, #1
    19ac:	d103      	bne.n	19b6 <setvbuf+0xfa>
    19ae:	89a3      	ldrh	r3, [r4, #12]
    19b0:	9a00      	ldr	r2, [sp, #0]
    19b2:	431a      	orrs	r2, r3
    19b4:	81a2      	strh	r2, [r4, #12]
    19b6:	2008      	movs	r0, #8
    19b8:	89a3      	ldrh	r3, [r4, #12]
    19ba:	6027      	str	r7, [r4, #0]
    19bc:	6127      	str	r7, [r4, #16]
    19be:	6165      	str	r5, [r4, #20]
    19c0:	4018      	ands	r0, r3
    19c2:	d018      	beq.n	19f6 <setvbuf+0x13a>
    19c4:	2001      	movs	r0, #1
    19c6:	4018      	ands	r0, r3
    19c8:	2300      	movs	r3, #0
    19ca:	4298      	cmp	r0, r3
    19cc:	d011      	beq.n	19f2 <setvbuf+0x136>
    19ce:	426d      	negs	r5, r5
    19d0:	60a3      	str	r3, [r4, #8]
    19d2:	61a5      	str	r5, [r4, #24]
    19d4:	0018      	movs	r0, r3
    19d6:	e7d3      	b.n	1980 <setvbuf+0xc4>
    19d8:	9801      	ldr	r0, [sp, #4]
    19da:	f000 fae1 	bl	1fa0 <malloc>
    19de:	1e07      	subs	r7, r0, #0
    19e0:	d0c0      	beq.n	1964 <setvbuf+0xa8>
    19e2:	2380      	movs	r3, #128	; 0x80
    19e4:	89a2      	ldrh	r2, [r4, #12]
    19e6:	9d01      	ldr	r5, [sp, #4]
    19e8:	4313      	orrs	r3, r2
    19ea:	81a3      	strh	r3, [r4, #12]
    19ec:	e7d6      	b.n	199c <setvbuf+0xe0>
    19ee:	2000      	movs	r0, #0
    19f0:	e7ba      	b.n	1968 <setvbuf+0xac>
    19f2:	60a5      	str	r5, [r4, #8]
    19f4:	e7c4      	b.n	1980 <setvbuf+0xc4>
    19f6:	60a0      	str	r0, [r4, #8]
    19f8:	e7c2      	b.n	1980 <setvbuf+0xc4>
    19fa:	2001      	movs	r0, #1
    19fc:	4240      	negs	r0, r0
    19fe:	e7bf      	b.n	1980 <setvbuf+0xc4>
    1a00:	20000004 	.word	0x20000004
    1a04:	0000233c 	.word	0x0000233c
    1a08:	fffff35c 	.word	0xfffff35c
    1a0c:	0000235c 	.word	0x0000235c
    1a10:	0000231c 	.word	0x0000231c

00001a14 <__swbuf_r>:
    1a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a16:	0005      	movs	r5, r0
    1a18:	000e      	movs	r6, r1
    1a1a:	0014      	movs	r4, r2
    1a1c:	2800      	cmp	r0, #0
    1a1e:	d004      	beq.n	1a2a <__swbuf_r+0x16>
    1a20:	6983      	ldr	r3, [r0, #24]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d101      	bne.n	1a2a <__swbuf_r+0x16>
    1a26:	f000 f9b9 	bl	1d9c <__sinit>
    1a2a:	4b22      	ldr	r3, [pc, #136]	; (1ab4 <__swbuf_r+0xa0>)
    1a2c:	429c      	cmp	r4, r3
    1a2e:	d12d      	bne.n	1a8c <__swbuf_r+0x78>
    1a30:	686c      	ldr	r4, [r5, #4]
    1a32:	69a3      	ldr	r3, [r4, #24]
    1a34:	60a3      	str	r3, [r4, #8]
    1a36:	89a3      	ldrh	r3, [r4, #12]
    1a38:	071b      	lsls	r3, r3, #28
    1a3a:	d531      	bpl.n	1aa0 <__swbuf_r+0x8c>
    1a3c:	6923      	ldr	r3, [r4, #16]
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d02e      	beq.n	1aa0 <__swbuf_r+0x8c>
    1a42:	6823      	ldr	r3, [r4, #0]
    1a44:	6922      	ldr	r2, [r4, #16]
    1a46:	b2f7      	uxtb	r7, r6
    1a48:	1a98      	subs	r0, r3, r2
    1a4a:	6963      	ldr	r3, [r4, #20]
    1a4c:	b2f6      	uxtb	r6, r6
    1a4e:	4298      	cmp	r0, r3
    1a50:	db05      	blt.n	1a5e <__swbuf_r+0x4a>
    1a52:	0021      	movs	r1, r4
    1a54:	0028      	movs	r0, r5
    1a56:	f000 f933 	bl	1cc0 <_fflush_r>
    1a5a:	2800      	cmp	r0, #0
    1a5c:	d126      	bne.n	1aac <__swbuf_r+0x98>
    1a5e:	68a3      	ldr	r3, [r4, #8]
    1a60:	3001      	adds	r0, #1
    1a62:	3b01      	subs	r3, #1
    1a64:	60a3      	str	r3, [r4, #8]
    1a66:	6823      	ldr	r3, [r4, #0]
    1a68:	1c5a      	adds	r2, r3, #1
    1a6a:	6022      	str	r2, [r4, #0]
    1a6c:	701f      	strb	r7, [r3, #0]
    1a6e:	6963      	ldr	r3, [r4, #20]
    1a70:	4298      	cmp	r0, r3
    1a72:	d004      	beq.n	1a7e <__swbuf_r+0x6a>
    1a74:	89a3      	ldrh	r3, [r4, #12]
    1a76:	07db      	lsls	r3, r3, #31
    1a78:	d51a      	bpl.n	1ab0 <__swbuf_r+0x9c>
    1a7a:	2e0a      	cmp	r6, #10
    1a7c:	d118      	bne.n	1ab0 <__swbuf_r+0x9c>
    1a7e:	0021      	movs	r1, r4
    1a80:	0028      	movs	r0, r5
    1a82:	f000 f91d 	bl	1cc0 <_fflush_r>
    1a86:	2800      	cmp	r0, #0
    1a88:	d012      	beq.n	1ab0 <__swbuf_r+0x9c>
    1a8a:	e00f      	b.n	1aac <__swbuf_r+0x98>
    1a8c:	4b0a      	ldr	r3, [pc, #40]	; (1ab8 <__swbuf_r+0xa4>)
    1a8e:	429c      	cmp	r4, r3
    1a90:	d101      	bne.n	1a96 <__swbuf_r+0x82>
    1a92:	68ac      	ldr	r4, [r5, #8]
    1a94:	e7cd      	b.n	1a32 <__swbuf_r+0x1e>
    1a96:	4b09      	ldr	r3, [pc, #36]	; (1abc <__swbuf_r+0xa8>)
    1a98:	429c      	cmp	r4, r3
    1a9a:	d1ca      	bne.n	1a32 <__swbuf_r+0x1e>
    1a9c:	68ec      	ldr	r4, [r5, #12]
    1a9e:	e7c8      	b.n	1a32 <__swbuf_r+0x1e>
    1aa0:	0021      	movs	r1, r4
    1aa2:	0028      	movs	r0, r5
    1aa4:	f000 f80c 	bl	1ac0 <__swsetup_r>
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d0ca      	beq.n	1a42 <__swbuf_r+0x2e>
    1aac:	2601      	movs	r6, #1
    1aae:	4276      	negs	r6, r6
    1ab0:	0030      	movs	r0, r6
    1ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ab4:	0000233c 	.word	0x0000233c
    1ab8:	0000235c 	.word	0x0000235c
    1abc:	0000231c 	.word	0x0000231c

00001ac0 <__swsetup_r>:
    1ac0:	4b36      	ldr	r3, [pc, #216]	; (1b9c <__swsetup_r+0xdc>)
    1ac2:	b570      	push	{r4, r5, r6, lr}
    1ac4:	681d      	ldr	r5, [r3, #0]
    1ac6:	0006      	movs	r6, r0
    1ac8:	000c      	movs	r4, r1
    1aca:	2d00      	cmp	r5, #0
    1acc:	d005      	beq.n	1ada <__swsetup_r+0x1a>
    1ace:	69ab      	ldr	r3, [r5, #24]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d102      	bne.n	1ada <__swsetup_r+0x1a>
    1ad4:	0028      	movs	r0, r5
    1ad6:	f000 f961 	bl	1d9c <__sinit>
    1ada:	4b31      	ldr	r3, [pc, #196]	; (1ba0 <__swsetup_r+0xe0>)
    1adc:	429c      	cmp	r4, r3
    1ade:	d10f      	bne.n	1b00 <__swsetup_r+0x40>
    1ae0:	686c      	ldr	r4, [r5, #4]
    1ae2:	230c      	movs	r3, #12
    1ae4:	5ee2      	ldrsh	r2, [r4, r3]
    1ae6:	b293      	uxth	r3, r2
    1ae8:	0719      	lsls	r1, r3, #28
    1aea:	d42d      	bmi.n	1b48 <__swsetup_r+0x88>
    1aec:	06d9      	lsls	r1, r3, #27
    1aee:	d411      	bmi.n	1b14 <__swsetup_r+0x54>
    1af0:	2309      	movs	r3, #9
    1af2:	2001      	movs	r0, #1
    1af4:	6033      	str	r3, [r6, #0]
    1af6:	3337      	adds	r3, #55	; 0x37
    1af8:	4313      	orrs	r3, r2
    1afa:	81a3      	strh	r3, [r4, #12]
    1afc:	4240      	negs	r0, r0
    1afe:	bd70      	pop	{r4, r5, r6, pc}
    1b00:	4b28      	ldr	r3, [pc, #160]	; (1ba4 <__swsetup_r+0xe4>)
    1b02:	429c      	cmp	r4, r3
    1b04:	d101      	bne.n	1b0a <__swsetup_r+0x4a>
    1b06:	68ac      	ldr	r4, [r5, #8]
    1b08:	e7eb      	b.n	1ae2 <__swsetup_r+0x22>
    1b0a:	4b27      	ldr	r3, [pc, #156]	; (1ba8 <__swsetup_r+0xe8>)
    1b0c:	429c      	cmp	r4, r3
    1b0e:	d1e8      	bne.n	1ae2 <__swsetup_r+0x22>
    1b10:	68ec      	ldr	r4, [r5, #12]
    1b12:	e7e6      	b.n	1ae2 <__swsetup_r+0x22>
    1b14:	075b      	lsls	r3, r3, #29
    1b16:	d513      	bpl.n	1b40 <__swsetup_r+0x80>
    1b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1b1a:	2900      	cmp	r1, #0
    1b1c:	d008      	beq.n	1b30 <__swsetup_r+0x70>
    1b1e:	0023      	movs	r3, r4
    1b20:	3344      	adds	r3, #68	; 0x44
    1b22:	4299      	cmp	r1, r3
    1b24:	d002      	beq.n	1b2c <__swsetup_r+0x6c>
    1b26:	0030      	movs	r0, r6
    1b28:	f000 fa44 	bl	1fb4 <_free_r>
    1b2c:	2300      	movs	r3, #0
    1b2e:	6363      	str	r3, [r4, #52]	; 0x34
    1b30:	2224      	movs	r2, #36	; 0x24
    1b32:	89a3      	ldrh	r3, [r4, #12]
    1b34:	4393      	bics	r3, r2
    1b36:	81a3      	strh	r3, [r4, #12]
    1b38:	2300      	movs	r3, #0
    1b3a:	6063      	str	r3, [r4, #4]
    1b3c:	6923      	ldr	r3, [r4, #16]
    1b3e:	6023      	str	r3, [r4, #0]
    1b40:	2308      	movs	r3, #8
    1b42:	89a2      	ldrh	r2, [r4, #12]
    1b44:	4313      	orrs	r3, r2
    1b46:	81a3      	strh	r3, [r4, #12]
    1b48:	6923      	ldr	r3, [r4, #16]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d10b      	bne.n	1b66 <__swsetup_r+0xa6>
    1b4e:	21a0      	movs	r1, #160	; 0xa0
    1b50:	2280      	movs	r2, #128	; 0x80
    1b52:	89a3      	ldrh	r3, [r4, #12]
    1b54:	0089      	lsls	r1, r1, #2
    1b56:	0092      	lsls	r2, r2, #2
    1b58:	400b      	ands	r3, r1
    1b5a:	4293      	cmp	r3, r2
    1b5c:	d003      	beq.n	1b66 <__swsetup_r+0xa6>
    1b5e:	0021      	movs	r1, r4
    1b60:	0030      	movs	r0, r6
    1b62:	f000 f9d9 	bl	1f18 <__smakebuf_r>
    1b66:	2301      	movs	r3, #1
    1b68:	89a2      	ldrh	r2, [r4, #12]
    1b6a:	4013      	ands	r3, r2
    1b6c:	d011      	beq.n	1b92 <__swsetup_r+0xd2>
    1b6e:	2300      	movs	r3, #0
    1b70:	60a3      	str	r3, [r4, #8]
    1b72:	6963      	ldr	r3, [r4, #20]
    1b74:	425b      	negs	r3, r3
    1b76:	61a3      	str	r3, [r4, #24]
    1b78:	2000      	movs	r0, #0
    1b7a:	6923      	ldr	r3, [r4, #16]
    1b7c:	4283      	cmp	r3, r0
    1b7e:	d1be      	bne.n	1afe <__swsetup_r+0x3e>
    1b80:	230c      	movs	r3, #12
    1b82:	5ee2      	ldrsh	r2, [r4, r3]
    1b84:	0613      	lsls	r3, r2, #24
    1b86:	d5ba      	bpl.n	1afe <__swsetup_r+0x3e>
    1b88:	2340      	movs	r3, #64	; 0x40
    1b8a:	4313      	orrs	r3, r2
    1b8c:	81a3      	strh	r3, [r4, #12]
    1b8e:	3801      	subs	r0, #1
    1b90:	e7b5      	b.n	1afe <__swsetup_r+0x3e>
    1b92:	0792      	lsls	r2, r2, #30
    1b94:	d400      	bmi.n	1b98 <__swsetup_r+0xd8>
    1b96:	6963      	ldr	r3, [r4, #20]
    1b98:	60a3      	str	r3, [r4, #8]
    1b9a:	e7ed      	b.n	1b78 <__swsetup_r+0xb8>
    1b9c:	20000004 	.word	0x20000004
    1ba0:	0000233c 	.word	0x0000233c
    1ba4:	0000235c 	.word	0x0000235c
    1ba8:	0000231c 	.word	0x0000231c

00001bac <__sflush_r>:
    1bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1bae:	898a      	ldrh	r2, [r1, #12]
    1bb0:	0005      	movs	r5, r0
    1bb2:	000c      	movs	r4, r1
    1bb4:	0713      	lsls	r3, r2, #28
    1bb6:	d460      	bmi.n	1c7a <__sflush_r+0xce>
    1bb8:	684b      	ldr	r3, [r1, #4]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	dc04      	bgt.n	1bc8 <__sflush_r+0x1c>
    1bbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	dc01      	bgt.n	1bc8 <__sflush_r+0x1c>
    1bc4:	2000      	movs	r0, #0
    1bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1bc8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1bca:	2f00      	cmp	r7, #0
    1bcc:	d0fa      	beq.n	1bc4 <__sflush_r+0x18>
    1bce:	2300      	movs	r3, #0
    1bd0:	682e      	ldr	r6, [r5, #0]
    1bd2:	602b      	str	r3, [r5, #0]
    1bd4:	2380      	movs	r3, #128	; 0x80
    1bd6:	015b      	lsls	r3, r3, #5
    1bd8:	401a      	ands	r2, r3
    1bda:	d034      	beq.n	1c46 <__sflush_r+0x9a>
    1bdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1bde:	89a3      	ldrh	r3, [r4, #12]
    1be0:	075b      	lsls	r3, r3, #29
    1be2:	d506      	bpl.n	1bf2 <__sflush_r+0x46>
    1be4:	6863      	ldr	r3, [r4, #4]
    1be6:	1ac0      	subs	r0, r0, r3
    1be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1bea:	2b00      	cmp	r3, #0
    1bec:	d001      	beq.n	1bf2 <__sflush_r+0x46>
    1bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1bf0:	1ac0      	subs	r0, r0, r3
    1bf2:	0002      	movs	r2, r0
    1bf4:	6a21      	ldr	r1, [r4, #32]
    1bf6:	2300      	movs	r3, #0
    1bf8:	0028      	movs	r0, r5
    1bfa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1bfc:	47b8      	blx	r7
    1bfe:	89a1      	ldrh	r1, [r4, #12]
    1c00:	1c43      	adds	r3, r0, #1
    1c02:	d106      	bne.n	1c12 <__sflush_r+0x66>
    1c04:	682b      	ldr	r3, [r5, #0]
    1c06:	2b1d      	cmp	r3, #29
    1c08:	d831      	bhi.n	1c6e <__sflush_r+0xc2>
    1c0a:	4a2c      	ldr	r2, [pc, #176]	; (1cbc <__sflush_r+0x110>)
    1c0c:	40da      	lsrs	r2, r3
    1c0e:	07d3      	lsls	r3, r2, #31
    1c10:	d52d      	bpl.n	1c6e <__sflush_r+0xc2>
    1c12:	2300      	movs	r3, #0
    1c14:	6063      	str	r3, [r4, #4]
    1c16:	6923      	ldr	r3, [r4, #16]
    1c18:	6023      	str	r3, [r4, #0]
    1c1a:	04cb      	lsls	r3, r1, #19
    1c1c:	d505      	bpl.n	1c2a <__sflush_r+0x7e>
    1c1e:	1c43      	adds	r3, r0, #1
    1c20:	d102      	bne.n	1c28 <__sflush_r+0x7c>
    1c22:	682b      	ldr	r3, [r5, #0]
    1c24:	2b00      	cmp	r3, #0
    1c26:	d100      	bne.n	1c2a <__sflush_r+0x7e>
    1c28:	6560      	str	r0, [r4, #84]	; 0x54
    1c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1c2c:	602e      	str	r6, [r5, #0]
    1c2e:	2900      	cmp	r1, #0
    1c30:	d0c8      	beq.n	1bc4 <__sflush_r+0x18>
    1c32:	0023      	movs	r3, r4
    1c34:	3344      	adds	r3, #68	; 0x44
    1c36:	4299      	cmp	r1, r3
    1c38:	d002      	beq.n	1c40 <__sflush_r+0x94>
    1c3a:	0028      	movs	r0, r5
    1c3c:	f000 f9ba 	bl	1fb4 <_free_r>
    1c40:	2000      	movs	r0, #0
    1c42:	6360      	str	r0, [r4, #52]	; 0x34
    1c44:	e7bf      	b.n	1bc6 <__sflush_r+0x1a>
    1c46:	2301      	movs	r3, #1
    1c48:	6a21      	ldr	r1, [r4, #32]
    1c4a:	0028      	movs	r0, r5
    1c4c:	47b8      	blx	r7
    1c4e:	1c43      	adds	r3, r0, #1
    1c50:	d1c5      	bne.n	1bde <__sflush_r+0x32>
    1c52:	682b      	ldr	r3, [r5, #0]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d0c2      	beq.n	1bde <__sflush_r+0x32>
    1c58:	2b1d      	cmp	r3, #29
    1c5a:	d001      	beq.n	1c60 <__sflush_r+0xb4>
    1c5c:	2b16      	cmp	r3, #22
    1c5e:	d101      	bne.n	1c64 <__sflush_r+0xb8>
    1c60:	602e      	str	r6, [r5, #0]
    1c62:	e7af      	b.n	1bc4 <__sflush_r+0x18>
    1c64:	2340      	movs	r3, #64	; 0x40
    1c66:	89a2      	ldrh	r2, [r4, #12]
    1c68:	4313      	orrs	r3, r2
    1c6a:	81a3      	strh	r3, [r4, #12]
    1c6c:	e7ab      	b.n	1bc6 <__sflush_r+0x1a>
    1c6e:	2340      	movs	r3, #64	; 0x40
    1c70:	430b      	orrs	r3, r1
    1c72:	2001      	movs	r0, #1
    1c74:	81a3      	strh	r3, [r4, #12]
    1c76:	4240      	negs	r0, r0
    1c78:	e7a5      	b.n	1bc6 <__sflush_r+0x1a>
    1c7a:	690f      	ldr	r7, [r1, #16]
    1c7c:	2f00      	cmp	r7, #0
    1c7e:	d0a1      	beq.n	1bc4 <__sflush_r+0x18>
    1c80:	680b      	ldr	r3, [r1, #0]
    1c82:	600f      	str	r7, [r1, #0]
    1c84:	1bdb      	subs	r3, r3, r7
    1c86:	9301      	str	r3, [sp, #4]
    1c88:	2300      	movs	r3, #0
    1c8a:	0792      	lsls	r2, r2, #30
    1c8c:	d100      	bne.n	1c90 <__sflush_r+0xe4>
    1c8e:	694b      	ldr	r3, [r1, #20]
    1c90:	60a3      	str	r3, [r4, #8]
    1c92:	9b01      	ldr	r3, [sp, #4]
    1c94:	2b00      	cmp	r3, #0
    1c96:	dc00      	bgt.n	1c9a <__sflush_r+0xee>
    1c98:	e794      	b.n	1bc4 <__sflush_r+0x18>
    1c9a:	9b01      	ldr	r3, [sp, #4]
    1c9c:	003a      	movs	r2, r7
    1c9e:	6a21      	ldr	r1, [r4, #32]
    1ca0:	0028      	movs	r0, r5
    1ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1ca4:	47b0      	blx	r6
    1ca6:	2800      	cmp	r0, #0
    1ca8:	dc03      	bgt.n	1cb2 <__sflush_r+0x106>
    1caa:	2340      	movs	r3, #64	; 0x40
    1cac:	89a2      	ldrh	r2, [r4, #12]
    1cae:	4313      	orrs	r3, r2
    1cb0:	e7df      	b.n	1c72 <__sflush_r+0xc6>
    1cb2:	9b01      	ldr	r3, [sp, #4]
    1cb4:	183f      	adds	r7, r7, r0
    1cb6:	1a1b      	subs	r3, r3, r0
    1cb8:	9301      	str	r3, [sp, #4]
    1cba:	e7ea      	b.n	1c92 <__sflush_r+0xe6>
    1cbc:	20400001 	.word	0x20400001

00001cc0 <_fflush_r>:
    1cc0:	690b      	ldr	r3, [r1, #16]
    1cc2:	b570      	push	{r4, r5, r6, lr}
    1cc4:	0005      	movs	r5, r0
    1cc6:	000c      	movs	r4, r1
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d101      	bne.n	1cd0 <_fflush_r+0x10>
    1ccc:	2000      	movs	r0, #0
    1cce:	bd70      	pop	{r4, r5, r6, pc}
    1cd0:	2800      	cmp	r0, #0
    1cd2:	d004      	beq.n	1cde <_fflush_r+0x1e>
    1cd4:	6983      	ldr	r3, [r0, #24]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	d101      	bne.n	1cde <_fflush_r+0x1e>
    1cda:	f000 f85f 	bl	1d9c <__sinit>
    1cde:	4b0b      	ldr	r3, [pc, #44]	; (1d0c <_fflush_r+0x4c>)
    1ce0:	429c      	cmp	r4, r3
    1ce2:	d109      	bne.n	1cf8 <_fflush_r+0x38>
    1ce4:	686c      	ldr	r4, [r5, #4]
    1ce6:	220c      	movs	r2, #12
    1ce8:	5ea3      	ldrsh	r3, [r4, r2]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d0ee      	beq.n	1ccc <_fflush_r+0xc>
    1cee:	0021      	movs	r1, r4
    1cf0:	0028      	movs	r0, r5
    1cf2:	f7ff ff5b 	bl	1bac <__sflush_r>
    1cf6:	e7ea      	b.n	1cce <_fflush_r+0xe>
    1cf8:	4b05      	ldr	r3, [pc, #20]	; (1d10 <_fflush_r+0x50>)
    1cfa:	429c      	cmp	r4, r3
    1cfc:	d101      	bne.n	1d02 <_fflush_r+0x42>
    1cfe:	68ac      	ldr	r4, [r5, #8]
    1d00:	e7f1      	b.n	1ce6 <_fflush_r+0x26>
    1d02:	4b04      	ldr	r3, [pc, #16]	; (1d14 <_fflush_r+0x54>)
    1d04:	429c      	cmp	r4, r3
    1d06:	d1ee      	bne.n	1ce6 <_fflush_r+0x26>
    1d08:	68ec      	ldr	r4, [r5, #12]
    1d0a:	e7ec      	b.n	1ce6 <_fflush_r+0x26>
    1d0c:	0000233c 	.word	0x0000233c
    1d10:	0000235c 	.word	0x0000235c
    1d14:	0000231c 	.word	0x0000231c

00001d18 <_cleanup_r>:
    1d18:	b510      	push	{r4, lr}
    1d1a:	4902      	ldr	r1, [pc, #8]	; (1d24 <_cleanup_r+0xc>)
    1d1c:	f000 f8b2 	bl	1e84 <_fwalk_reent>
    1d20:	bd10      	pop	{r4, pc}
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	00001cc1 	.word	0x00001cc1

00001d28 <std.isra.0>:
    1d28:	2300      	movs	r3, #0
    1d2a:	b510      	push	{r4, lr}
    1d2c:	0004      	movs	r4, r0
    1d2e:	6003      	str	r3, [r0, #0]
    1d30:	6043      	str	r3, [r0, #4]
    1d32:	6083      	str	r3, [r0, #8]
    1d34:	8181      	strh	r1, [r0, #12]
    1d36:	6643      	str	r3, [r0, #100]	; 0x64
    1d38:	81c2      	strh	r2, [r0, #14]
    1d3a:	6103      	str	r3, [r0, #16]
    1d3c:	6143      	str	r3, [r0, #20]
    1d3e:	6183      	str	r3, [r0, #24]
    1d40:	0019      	movs	r1, r3
    1d42:	2208      	movs	r2, #8
    1d44:	305c      	adds	r0, #92	; 0x5c
    1d46:	f7ff fd3d 	bl	17c4 <memset>
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <std.isra.0+0x38>)
    1d4c:	6224      	str	r4, [r4, #32]
    1d4e:	6263      	str	r3, [r4, #36]	; 0x24
    1d50:	4b04      	ldr	r3, [pc, #16]	; (1d64 <std.isra.0+0x3c>)
    1d52:	62a3      	str	r3, [r4, #40]	; 0x28
    1d54:	4b04      	ldr	r3, [pc, #16]	; (1d68 <std.isra.0+0x40>)
    1d56:	62e3      	str	r3, [r4, #44]	; 0x2c
    1d58:	4b04      	ldr	r3, [pc, #16]	; (1d6c <std.isra.0+0x44>)
    1d5a:	6323      	str	r3, [r4, #48]	; 0x30
    1d5c:	bd10      	pop	{r4, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	00002129 	.word	0x00002129
    1d64:	00002151 	.word	0x00002151
    1d68:	00002189 	.word	0x00002189
    1d6c:	000021b5 	.word	0x000021b5

00001d70 <__sfmoreglue>:
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	2568      	movs	r5, #104	; 0x68
    1d74:	1e4a      	subs	r2, r1, #1
    1d76:	4355      	muls	r5, r2
    1d78:	000e      	movs	r6, r1
    1d7a:	0029      	movs	r1, r5
    1d7c:	3174      	adds	r1, #116	; 0x74
    1d7e:	f000 f963 	bl	2048 <_malloc_r>
    1d82:	1e04      	subs	r4, r0, #0
    1d84:	d008      	beq.n	1d98 <__sfmoreglue+0x28>
    1d86:	2100      	movs	r1, #0
    1d88:	002a      	movs	r2, r5
    1d8a:	6001      	str	r1, [r0, #0]
    1d8c:	6046      	str	r6, [r0, #4]
    1d8e:	300c      	adds	r0, #12
    1d90:	60a0      	str	r0, [r4, #8]
    1d92:	3268      	adds	r2, #104	; 0x68
    1d94:	f7ff fd16 	bl	17c4 <memset>
    1d98:	0020      	movs	r0, r4
    1d9a:	bd70      	pop	{r4, r5, r6, pc}

00001d9c <__sinit>:
    1d9c:	6983      	ldr	r3, [r0, #24]
    1d9e:	b513      	push	{r0, r1, r4, lr}
    1da0:	0004      	movs	r4, r0
    1da2:	2b00      	cmp	r3, #0
    1da4:	d128      	bne.n	1df8 <__sinit+0x5c>
    1da6:	6483      	str	r3, [r0, #72]	; 0x48
    1da8:	64c3      	str	r3, [r0, #76]	; 0x4c
    1daa:	6503      	str	r3, [r0, #80]	; 0x50
    1dac:	4b13      	ldr	r3, [pc, #76]	; (1dfc <__sinit+0x60>)
    1dae:	4a14      	ldr	r2, [pc, #80]	; (1e00 <__sinit+0x64>)
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	6282      	str	r2, [r0, #40]	; 0x28
    1db4:	9301      	str	r3, [sp, #4]
    1db6:	4298      	cmp	r0, r3
    1db8:	d101      	bne.n	1dbe <__sinit+0x22>
    1dba:	2301      	movs	r3, #1
    1dbc:	6183      	str	r3, [r0, #24]
    1dbe:	0020      	movs	r0, r4
    1dc0:	f000 f820 	bl	1e04 <__sfp>
    1dc4:	6060      	str	r0, [r4, #4]
    1dc6:	0020      	movs	r0, r4
    1dc8:	f000 f81c 	bl	1e04 <__sfp>
    1dcc:	60a0      	str	r0, [r4, #8]
    1dce:	0020      	movs	r0, r4
    1dd0:	f000 f818 	bl	1e04 <__sfp>
    1dd4:	2200      	movs	r2, #0
    1dd6:	60e0      	str	r0, [r4, #12]
    1dd8:	2104      	movs	r1, #4
    1dda:	6860      	ldr	r0, [r4, #4]
    1ddc:	f7ff ffa4 	bl	1d28 <std.isra.0>
    1de0:	2201      	movs	r2, #1
    1de2:	2109      	movs	r1, #9
    1de4:	68a0      	ldr	r0, [r4, #8]
    1de6:	f7ff ff9f 	bl	1d28 <std.isra.0>
    1dea:	2202      	movs	r2, #2
    1dec:	2112      	movs	r1, #18
    1dee:	68e0      	ldr	r0, [r4, #12]
    1df0:	f7ff ff9a 	bl	1d28 <std.isra.0>
    1df4:	2301      	movs	r3, #1
    1df6:	61a3      	str	r3, [r4, #24]
    1df8:	bd13      	pop	{r0, r1, r4, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	00002318 	.word	0x00002318
    1e00:	00001d19 	.word	0x00001d19

00001e04 <__sfp>:
    1e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e06:	4b1e      	ldr	r3, [pc, #120]	; (1e80 <__sfp+0x7c>)
    1e08:	0007      	movs	r7, r0
    1e0a:	681e      	ldr	r6, [r3, #0]
    1e0c:	69b3      	ldr	r3, [r6, #24]
    1e0e:	2b00      	cmp	r3, #0
    1e10:	d102      	bne.n	1e18 <__sfp+0x14>
    1e12:	0030      	movs	r0, r6
    1e14:	f7ff ffc2 	bl	1d9c <__sinit>
    1e18:	3648      	adds	r6, #72	; 0x48
    1e1a:	68b4      	ldr	r4, [r6, #8]
    1e1c:	6873      	ldr	r3, [r6, #4]
    1e1e:	3b01      	subs	r3, #1
    1e20:	d504      	bpl.n	1e2c <__sfp+0x28>
    1e22:	6833      	ldr	r3, [r6, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d007      	beq.n	1e38 <__sfp+0x34>
    1e28:	6836      	ldr	r6, [r6, #0]
    1e2a:	e7f6      	b.n	1e1a <__sfp+0x16>
    1e2c:	220c      	movs	r2, #12
    1e2e:	5ea5      	ldrsh	r5, [r4, r2]
    1e30:	2d00      	cmp	r5, #0
    1e32:	d00d      	beq.n	1e50 <__sfp+0x4c>
    1e34:	3468      	adds	r4, #104	; 0x68
    1e36:	e7f2      	b.n	1e1e <__sfp+0x1a>
    1e38:	2104      	movs	r1, #4
    1e3a:	0038      	movs	r0, r7
    1e3c:	f7ff ff98 	bl	1d70 <__sfmoreglue>
    1e40:	6030      	str	r0, [r6, #0]
    1e42:	2800      	cmp	r0, #0
    1e44:	d1f0      	bne.n	1e28 <__sfp+0x24>
    1e46:	230c      	movs	r3, #12
    1e48:	0004      	movs	r4, r0
    1e4a:	603b      	str	r3, [r7, #0]
    1e4c:	0020      	movs	r0, r4
    1e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e50:	2301      	movs	r3, #1
    1e52:	0020      	movs	r0, r4
    1e54:	425b      	negs	r3, r3
    1e56:	81e3      	strh	r3, [r4, #14]
    1e58:	3302      	adds	r3, #2
    1e5a:	81a3      	strh	r3, [r4, #12]
    1e5c:	6665      	str	r5, [r4, #100]	; 0x64
    1e5e:	6025      	str	r5, [r4, #0]
    1e60:	60a5      	str	r5, [r4, #8]
    1e62:	6065      	str	r5, [r4, #4]
    1e64:	6125      	str	r5, [r4, #16]
    1e66:	6165      	str	r5, [r4, #20]
    1e68:	61a5      	str	r5, [r4, #24]
    1e6a:	2208      	movs	r2, #8
    1e6c:	0029      	movs	r1, r5
    1e6e:	305c      	adds	r0, #92	; 0x5c
    1e70:	f7ff fca8 	bl	17c4 <memset>
    1e74:	6365      	str	r5, [r4, #52]	; 0x34
    1e76:	63a5      	str	r5, [r4, #56]	; 0x38
    1e78:	64a5      	str	r5, [r4, #72]	; 0x48
    1e7a:	64e5      	str	r5, [r4, #76]	; 0x4c
    1e7c:	e7e6      	b.n	1e4c <__sfp+0x48>
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	00002318 	.word	0x00002318

00001e84 <_fwalk_reent>:
    1e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e86:	0004      	movs	r4, r0
    1e88:	0007      	movs	r7, r0
    1e8a:	2600      	movs	r6, #0
    1e8c:	9101      	str	r1, [sp, #4]
    1e8e:	3448      	adds	r4, #72	; 0x48
    1e90:	2c00      	cmp	r4, #0
    1e92:	d101      	bne.n	1e98 <_fwalk_reent+0x14>
    1e94:	0030      	movs	r0, r6
    1e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1e98:	6863      	ldr	r3, [r4, #4]
    1e9a:	68a5      	ldr	r5, [r4, #8]
    1e9c:	9300      	str	r3, [sp, #0]
    1e9e:	9b00      	ldr	r3, [sp, #0]
    1ea0:	3b01      	subs	r3, #1
    1ea2:	9300      	str	r3, [sp, #0]
    1ea4:	d501      	bpl.n	1eaa <_fwalk_reent+0x26>
    1ea6:	6824      	ldr	r4, [r4, #0]
    1ea8:	e7f2      	b.n	1e90 <_fwalk_reent+0xc>
    1eaa:	89ab      	ldrh	r3, [r5, #12]
    1eac:	2b01      	cmp	r3, #1
    1eae:	d908      	bls.n	1ec2 <_fwalk_reent+0x3e>
    1eb0:	220e      	movs	r2, #14
    1eb2:	5eab      	ldrsh	r3, [r5, r2]
    1eb4:	3301      	adds	r3, #1
    1eb6:	d004      	beq.n	1ec2 <_fwalk_reent+0x3e>
    1eb8:	0029      	movs	r1, r5
    1eba:	0038      	movs	r0, r7
    1ebc:	9b01      	ldr	r3, [sp, #4]
    1ebe:	4798      	blx	r3
    1ec0:	4306      	orrs	r6, r0
    1ec2:	3568      	adds	r5, #104	; 0x68
    1ec4:	e7eb      	b.n	1e9e <_fwalk_reent+0x1a>
	...

00001ec8 <__swhatbuf_r>:
    1ec8:	b570      	push	{r4, r5, r6, lr}
    1eca:	000e      	movs	r6, r1
    1ecc:	001d      	movs	r5, r3
    1ece:	230e      	movs	r3, #14
    1ed0:	5ec9      	ldrsh	r1, [r1, r3]
    1ed2:	b090      	sub	sp, #64	; 0x40
    1ed4:	0014      	movs	r4, r2
    1ed6:	2900      	cmp	r1, #0
    1ed8:	da07      	bge.n	1eea <__swhatbuf_r+0x22>
    1eda:	2300      	movs	r3, #0
    1edc:	602b      	str	r3, [r5, #0]
    1ede:	89b3      	ldrh	r3, [r6, #12]
    1ee0:	061b      	lsls	r3, r3, #24
    1ee2:	d411      	bmi.n	1f08 <__swhatbuf_r+0x40>
    1ee4:	2380      	movs	r3, #128	; 0x80
    1ee6:	00db      	lsls	r3, r3, #3
    1ee8:	e00f      	b.n	1f0a <__swhatbuf_r+0x42>
    1eea:	aa01      	add	r2, sp, #4
    1eec:	f000 f98e 	bl	220c <_fstat_r>
    1ef0:	2800      	cmp	r0, #0
    1ef2:	dbf2      	blt.n	1eda <__swhatbuf_r+0x12>
    1ef4:	22f0      	movs	r2, #240	; 0xf0
    1ef6:	9b02      	ldr	r3, [sp, #8]
    1ef8:	0212      	lsls	r2, r2, #8
    1efa:	4013      	ands	r3, r2
    1efc:	4a05      	ldr	r2, [pc, #20]	; (1f14 <__swhatbuf_r+0x4c>)
    1efe:	189b      	adds	r3, r3, r2
    1f00:	425a      	negs	r2, r3
    1f02:	4153      	adcs	r3, r2
    1f04:	602b      	str	r3, [r5, #0]
    1f06:	e7ed      	b.n	1ee4 <__swhatbuf_r+0x1c>
    1f08:	2340      	movs	r3, #64	; 0x40
    1f0a:	2000      	movs	r0, #0
    1f0c:	6023      	str	r3, [r4, #0]
    1f0e:	b010      	add	sp, #64	; 0x40
    1f10:	bd70      	pop	{r4, r5, r6, pc}
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	ffffe000 	.word	0xffffe000

00001f18 <__smakebuf_r>:
    1f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f1a:	2602      	movs	r6, #2
    1f1c:	898b      	ldrh	r3, [r1, #12]
    1f1e:	0005      	movs	r5, r0
    1f20:	000c      	movs	r4, r1
    1f22:	4233      	tst	r3, r6
    1f24:	d006      	beq.n	1f34 <__smakebuf_r+0x1c>
    1f26:	0023      	movs	r3, r4
    1f28:	3347      	adds	r3, #71	; 0x47
    1f2a:	6023      	str	r3, [r4, #0]
    1f2c:	6123      	str	r3, [r4, #16]
    1f2e:	2301      	movs	r3, #1
    1f30:	6163      	str	r3, [r4, #20]
    1f32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1f34:	ab01      	add	r3, sp, #4
    1f36:	466a      	mov	r2, sp
    1f38:	f7ff ffc6 	bl	1ec8 <__swhatbuf_r>
    1f3c:	9900      	ldr	r1, [sp, #0]
    1f3e:	0007      	movs	r7, r0
    1f40:	0028      	movs	r0, r5
    1f42:	f000 f881 	bl	2048 <_malloc_r>
    1f46:	2800      	cmp	r0, #0
    1f48:	d108      	bne.n	1f5c <__smakebuf_r+0x44>
    1f4a:	220c      	movs	r2, #12
    1f4c:	5ea3      	ldrsh	r3, [r4, r2]
    1f4e:	059a      	lsls	r2, r3, #22
    1f50:	d4ef      	bmi.n	1f32 <__smakebuf_r+0x1a>
    1f52:	2203      	movs	r2, #3
    1f54:	4393      	bics	r3, r2
    1f56:	431e      	orrs	r6, r3
    1f58:	81a6      	strh	r6, [r4, #12]
    1f5a:	e7e4      	b.n	1f26 <__smakebuf_r+0xe>
    1f5c:	4b0f      	ldr	r3, [pc, #60]	; (1f9c <__smakebuf_r+0x84>)
    1f5e:	62ab      	str	r3, [r5, #40]	; 0x28
    1f60:	2380      	movs	r3, #128	; 0x80
    1f62:	89a2      	ldrh	r2, [r4, #12]
    1f64:	6020      	str	r0, [r4, #0]
    1f66:	4313      	orrs	r3, r2
    1f68:	81a3      	strh	r3, [r4, #12]
    1f6a:	9b00      	ldr	r3, [sp, #0]
    1f6c:	6120      	str	r0, [r4, #16]
    1f6e:	6163      	str	r3, [r4, #20]
    1f70:	9b01      	ldr	r3, [sp, #4]
    1f72:	2b00      	cmp	r3, #0
    1f74:	d00d      	beq.n	1f92 <__smakebuf_r+0x7a>
    1f76:	230e      	movs	r3, #14
    1f78:	5ee1      	ldrsh	r1, [r4, r3]
    1f7a:	0028      	movs	r0, r5
    1f7c:	f000 f958 	bl	2230 <_isatty_r>
    1f80:	2800      	cmp	r0, #0
    1f82:	d006      	beq.n	1f92 <__smakebuf_r+0x7a>
    1f84:	2203      	movs	r2, #3
    1f86:	89a3      	ldrh	r3, [r4, #12]
    1f88:	4393      	bics	r3, r2
    1f8a:	001a      	movs	r2, r3
    1f8c:	2301      	movs	r3, #1
    1f8e:	4313      	orrs	r3, r2
    1f90:	81a3      	strh	r3, [r4, #12]
    1f92:	89a0      	ldrh	r0, [r4, #12]
    1f94:	4338      	orrs	r0, r7
    1f96:	81a0      	strh	r0, [r4, #12]
    1f98:	e7cb      	b.n	1f32 <__smakebuf_r+0x1a>
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	00001d19 	.word	0x00001d19

00001fa0 <malloc>:
    1fa0:	b510      	push	{r4, lr}
    1fa2:	4b03      	ldr	r3, [pc, #12]	; (1fb0 <malloc+0x10>)
    1fa4:	0001      	movs	r1, r0
    1fa6:	6818      	ldr	r0, [r3, #0]
    1fa8:	f000 f84e 	bl	2048 <_malloc_r>
    1fac:	bd10      	pop	{r4, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	20000004 	.word	0x20000004

00001fb4 <_free_r>:
    1fb4:	b570      	push	{r4, r5, r6, lr}
    1fb6:	0005      	movs	r5, r0
    1fb8:	2900      	cmp	r1, #0
    1fba:	d010      	beq.n	1fde <_free_r+0x2a>
    1fbc:	1f0c      	subs	r4, r1, #4
    1fbe:	6823      	ldr	r3, [r4, #0]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	da00      	bge.n	1fc6 <_free_r+0x12>
    1fc4:	18e4      	adds	r4, r4, r3
    1fc6:	0028      	movs	r0, r5
    1fc8:	f000 f958 	bl	227c <__malloc_lock>
    1fcc:	4a1d      	ldr	r2, [pc, #116]	; (2044 <STACK_SIZE+0x44>)
    1fce:	6813      	ldr	r3, [r2, #0]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d105      	bne.n	1fe0 <_free_r+0x2c>
    1fd4:	6063      	str	r3, [r4, #4]
    1fd6:	6014      	str	r4, [r2, #0]
    1fd8:	0028      	movs	r0, r5
    1fda:	f000 f950 	bl	227e <__malloc_unlock>
    1fde:	bd70      	pop	{r4, r5, r6, pc}
    1fe0:	42a3      	cmp	r3, r4
    1fe2:	d909      	bls.n	1ff8 <_free_r+0x44>
    1fe4:	6821      	ldr	r1, [r4, #0]
    1fe6:	1860      	adds	r0, r4, r1
    1fe8:	4283      	cmp	r3, r0
    1fea:	d1f3      	bne.n	1fd4 <_free_r+0x20>
    1fec:	6818      	ldr	r0, [r3, #0]
    1fee:	685b      	ldr	r3, [r3, #4]
    1ff0:	1841      	adds	r1, r0, r1
    1ff2:	6021      	str	r1, [r4, #0]
    1ff4:	e7ee      	b.n	1fd4 <_free_r+0x20>
    1ff6:	0013      	movs	r3, r2
    1ff8:	685a      	ldr	r2, [r3, #4]
    1ffa:	2a00      	cmp	r2, #0
    1ffc:	d001      	beq.n	2002 <STACK_SIZE+0x2>
    1ffe:	42a2      	cmp	r2, r4
    2000:	d9f9      	bls.n	1ff6 <_free_r+0x42>
    2002:	6819      	ldr	r1, [r3, #0]
    2004:	1858      	adds	r0, r3, r1
    2006:	42a0      	cmp	r0, r4
    2008:	d10b      	bne.n	2022 <STACK_SIZE+0x22>
    200a:	6820      	ldr	r0, [r4, #0]
    200c:	1809      	adds	r1, r1, r0
    200e:	1858      	adds	r0, r3, r1
    2010:	6019      	str	r1, [r3, #0]
    2012:	4282      	cmp	r2, r0
    2014:	d1e0      	bne.n	1fd8 <_free_r+0x24>
    2016:	6810      	ldr	r0, [r2, #0]
    2018:	6852      	ldr	r2, [r2, #4]
    201a:	1841      	adds	r1, r0, r1
    201c:	6019      	str	r1, [r3, #0]
    201e:	605a      	str	r2, [r3, #4]
    2020:	e7da      	b.n	1fd8 <_free_r+0x24>
    2022:	42a0      	cmp	r0, r4
    2024:	d902      	bls.n	202c <STACK_SIZE+0x2c>
    2026:	230c      	movs	r3, #12
    2028:	602b      	str	r3, [r5, #0]
    202a:	e7d5      	b.n	1fd8 <_free_r+0x24>
    202c:	6821      	ldr	r1, [r4, #0]
    202e:	1860      	adds	r0, r4, r1
    2030:	4282      	cmp	r2, r0
    2032:	d103      	bne.n	203c <STACK_SIZE+0x3c>
    2034:	6810      	ldr	r0, [r2, #0]
    2036:	6852      	ldr	r2, [r2, #4]
    2038:	1841      	adds	r1, r0, r1
    203a:	6021      	str	r1, [r4, #0]
    203c:	6062      	str	r2, [r4, #4]
    203e:	605c      	str	r4, [r3, #4]
    2040:	e7ca      	b.n	1fd8 <_free_r+0x24>
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	200000c4 	.word	0x200000c4

00002048 <_malloc_r>:
    2048:	2303      	movs	r3, #3
    204a:	b570      	push	{r4, r5, r6, lr}
    204c:	1ccd      	adds	r5, r1, #3
    204e:	439d      	bics	r5, r3
    2050:	3508      	adds	r5, #8
    2052:	0006      	movs	r6, r0
    2054:	2d0c      	cmp	r5, #12
    2056:	d21e      	bcs.n	2096 <_malloc_r+0x4e>
    2058:	250c      	movs	r5, #12
    205a:	42a9      	cmp	r1, r5
    205c:	d81d      	bhi.n	209a <_malloc_r+0x52>
    205e:	0030      	movs	r0, r6
    2060:	f000 f90c 	bl	227c <__malloc_lock>
    2064:	4a25      	ldr	r2, [pc, #148]	; (20fc <_malloc_r+0xb4>)
    2066:	6814      	ldr	r4, [r2, #0]
    2068:	0021      	movs	r1, r4
    206a:	2900      	cmp	r1, #0
    206c:	d119      	bne.n	20a2 <_malloc_r+0x5a>
    206e:	4c24      	ldr	r4, [pc, #144]	; (2100 <_malloc_r+0xb8>)
    2070:	6823      	ldr	r3, [r4, #0]
    2072:	2b00      	cmp	r3, #0
    2074:	d103      	bne.n	207e <_malloc_r+0x36>
    2076:	0030      	movs	r0, r6
    2078:	f000 f844 	bl	2104 <_sbrk_r>
    207c:	6020      	str	r0, [r4, #0]
    207e:	0029      	movs	r1, r5
    2080:	0030      	movs	r0, r6
    2082:	f000 f83f 	bl	2104 <_sbrk_r>
    2086:	1c43      	adds	r3, r0, #1
    2088:	d12c      	bne.n	20e4 <_malloc_r+0x9c>
    208a:	230c      	movs	r3, #12
    208c:	0030      	movs	r0, r6
    208e:	6033      	str	r3, [r6, #0]
    2090:	f000 f8f5 	bl	227e <__malloc_unlock>
    2094:	e003      	b.n	209e <_malloc_r+0x56>
    2096:	2d00      	cmp	r5, #0
    2098:	dadf      	bge.n	205a <_malloc_r+0x12>
    209a:	230c      	movs	r3, #12
    209c:	6033      	str	r3, [r6, #0]
    209e:	2000      	movs	r0, #0
    20a0:	bd70      	pop	{r4, r5, r6, pc}
    20a2:	680b      	ldr	r3, [r1, #0]
    20a4:	1b5b      	subs	r3, r3, r5
    20a6:	d41a      	bmi.n	20de <_malloc_r+0x96>
    20a8:	2b0b      	cmp	r3, #11
    20aa:	d903      	bls.n	20b4 <_malloc_r+0x6c>
    20ac:	600b      	str	r3, [r1, #0]
    20ae:	18cc      	adds	r4, r1, r3
    20b0:	6025      	str	r5, [r4, #0]
    20b2:	e003      	b.n	20bc <_malloc_r+0x74>
    20b4:	428c      	cmp	r4, r1
    20b6:	d10e      	bne.n	20d6 <_malloc_r+0x8e>
    20b8:	6863      	ldr	r3, [r4, #4]
    20ba:	6013      	str	r3, [r2, #0]
    20bc:	0030      	movs	r0, r6
    20be:	f000 f8de 	bl	227e <__malloc_unlock>
    20c2:	0020      	movs	r0, r4
    20c4:	2207      	movs	r2, #7
    20c6:	300b      	adds	r0, #11
    20c8:	1d23      	adds	r3, r4, #4
    20ca:	4390      	bics	r0, r2
    20cc:	1ac3      	subs	r3, r0, r3
    20ce:	d0e7      	beq.n	20a0 <_malloc_r+0x58>
    20d0:	425a      	negs	r2, r3
    20d2:	50e2      	str	r2, [r4, r3]
    20d4:	e7e4      	b.n	20a0 <_malloc_r+0x58>
    20d6:	684b      	ldr	r3, [r1, #4]
    20d8:	6063      	str	r3, [r4, #4]
    20da:	000c      	movs	r4, r1
    20dc:	e7ee      	b.n	20bc <_malloc_r+0x74>
    20de:	000c      	movs	r4, r1
    20e0:	6849      	ldr	r1, [r1, #4]
    20e2:	e7c2      	b.n	206a <_malloc_r+0x22>
    20e4:	2303      	movs	r3, #3
    20e6:	1cc4      	adds	r4, r0, #3
    20e8:	439c      	bics	r4, r3
    20ea:	42a0      	cmp	r0, r4
    20ec:	d0e0      	beq.n	20b0 <_malloc_r+0x68>
    20ee:	1a21      	subs	r1, r4, r0
    20f0:	0030      	movs	r0, r6
    20f2:	f000 f807 	bl	2104 <_sbrk_r>
    20f6:	1c43      	adds	r3, r0, #1
    20f8:	d1da      	bne.n	20b0 <_malloc_r+0x68>
    20fa:	e7c6      	b.n	208a <_malloc_r+0x42>
    20fc:	200000c4 	.word	0x200000c4
    2100:	200000c8 	.word	0x200000c8

00002104 <_sbrk_r>:
    2104:	2300      	movs	r3, #0
    2106:	b570      	push	{r4, r5, r6, lr}
    2108:	4c06      	ldr	r4, [pc, #24]	; (2124 <_sbrk_r+0x20>)
    210a:	0005      	movs	r5, r0
    210c:	0008      	movs	r0, r1
    210e:	6023      	str	r3, [r4, #0]
    2110:	f7ff fa52 	bl	15b8 <_sbrk>
    2114:	1c43      	adds	r3, r0, #1
    2116:	d103      	bne.n	2120 <_sbrk_r+0x1c>
    2118:	6823      	ldr	r3, [r4, #0]
    211a:	2b00      	cmp	r3, #0
    211c:	d000      	beq.n	2120 <_sbrk_r+0x1c>
    211e:	602b      	str	r3, [r5, #0]
    2120:	bd70      	pop	{r4, r5, r6, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	20000178 	.word	0x20000178

00002128 <__sread>:
    2128:	b570      	push	{r4, r5, r6, lr}
    212a:	000c      	movs	r4, r1
    212c:	250e      	movs	r5, #14
    212e:	5f49      	ldrsh	r1, [r1, r5]
    2130:	f000 f8a6 	bl	2280 <_read_r>
    2134:	2800      	cmp	r0, #0
    2136:	db03      	blt.n	2140 <__sread+0x18>
    2138:	6d63      	ldr	r3, [r4, #84]	; 0x54
    213a:	181b      	adds	r3, r3, r0
    213c:	6563      	str	r3, [r4, #84]	; 0x54
    213e:	bd70      	pop	{r4, r5, r6, pc}
    2140:	89a3      	ldrh	r3, [r4, #12]
    2142:	4a02      	ldr	r2, [pc, #8]	; (214c <__sread+0x24>)
    2144:	4013      	ands	r3, r2
    2146:	81a3      	strh	r3, [r4, #12]
    2148:	e7f9      	b.n	213e <__sread+0x16>
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	ffffefff 	.word	0xffffefff

00002150 <__swrite>:
    2150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2152:	001f      	movs	r7, r3
    2154:	898b      	ldrh	r3, [r1, #12]
    2156:	0005      	movs	r5, r0
    2158:	000c      	movs	r4, r1
    215a:	0016      	movs	r6, r2
    215c:	05db      	lsls	r3, r3, #23
    215e:	d505      	bpl.n	216c <__swrite+0x1c>
    2160:	230e      	movs	r3, #14
    2162:	5ec9      	ldrsh	r1, [r1, r3]
    2164:	2200      	movs	r2, #0
    2166:	2302      	movs	r3, #2
    2168:	f000 f874 	bl	2254 <_lseek_r>
    216c:	89a3      	ldrh	r3, [r4, #12]
    216e:	4a05      	ldr	r2, [pc, #20]	; (2184 <__swrite+0x34>)
    2170:	0028      	movs	r0, r5
    2172:	4013      	ands	r3, r2
    2174:	81a3      	strh	r3, [r4, #12]
    2176:	0032      	movs	r2, r6
    2178:	230e      	movs	r3, #14
    217a:	5ee1      	ldrsh	r1, [r4, r3]
    217c:	003b      	movs	r3, r7
    217e:	f000 f81f 	bl	21c0 <_write_r>
    2182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2184:	ffffefff 	.word	0xffffefff

00002188 <__sseek>:
    2188:	b570      	push	{r4, r5, r6, lr}
    218a:	000c      	movs	r4, r1
    218c:	250e      	movs	r5, #14
    218e:	5f49      	ldrsh	r1, [r1, r5]
    2190:	f000 f860 	bl	2254 <_lseek_r>
    2194:	89a3      	ldrh	r3, [r4, #12]
    2196:	1c42      	adds	r2, r0, #1
    2198:	d103      	bne.n	21a2 <__sseek+0x1a>
    219a:	4a05      	ldr	r2, [pc, #20]	; (21b0 <__sseek+0x28>)
    219c:	4013      	ands	r3, r2
    219e:	81a3      	strh	r3, [r4, #12]
    21a0:	bd70      	pop	{r4, r5, r6, pc}
    21a2:	2280      	movs	r2, #128	; 0x80
    21a4:	0152      	lsls	r2, r2, #5
    21a6:	4313      	orrs	r3, r2
    21a8:	81a3      	strh	r3, [r4, #12]
    21aa:	6560      	str	r0, [r4, #84]	; 0x54
    21ac:	e7f8      	b.n	21a0 <__sseek+0x18>
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	ffffefff 	.word	0xffffefff

000021b4 <__sclose>:
    21b4:	b510      	push	{r4, lr}
    21b6:	230e      	movs	r3, #14
    21b8:	5ec9      	ldrsh	r1, [r1, r3]
    21ba:	f000 f815 	bl	21e8 <_close_r>
    21be:	bd10      	pop	{r4, pc}

000021c0 <_write_r>:
    21c0:	b570      	push	{r4, r5, r6, lr}
    21c2:	0005      	movs	r5, r0
    21c4:	0008      	movs	r0, r1
    21c6:	0011      	movs	r1, r2
    21c8:	2200      	movs	r2, #0
    21ca:	4c06      	ldr	r4, [pc, #24]	; (21e4 <_write_r+0x24>)
    21cc:	6022      	str	r2, [r4, #0]
    21ce:	001a      	movs	r2, r3
    21d0:	f7fe f866 	bl	2a0 <_write>
    21d4:	1c43      	adds	r3, r0, #1
    21d6:	d103      	bne.n	21e0 <_write_r+0x20>
    21d8:	6823      	ldr	r3, [r4, #0]
    21da:	2b00      	cmp	r3, #0
    21dc:	d000      	beq.n	21e0 <_write_r+0x20>
    21de:	602b      	str	r3, [r5, #0]
    21e0:	bd70      	pop	{r4, r5, r6, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	20000178 	.word	0x20000178

000021e8 <_close_r>:
    21e8:	2300      	movs	r3, #0
    21ea:	b570      	push	{r4, r5, r6, lr}
    21ec:	4c06      	ldr	r4, [pc, #24]	; (2208 <_close_r+0x20>)
    21ee:	0005      	movs	r5, r0
    21f0:	0008      	movs	r0, r1
    21f2:	6023      	str	r3, [r4, #0]
    21f4:	f7ff f9f2 	bl	15dc <_close>
    21f8:	1c43      	adds	r3, r0, #1
    21fa:	d103      	bne.n	2204 <_close_r+0x1c>
    21fc:	6823      	ldr	r3, [r4, #0]
    21fe:	2b00      	cmp	r3, #0
    2200:	d000      	beq.n	2204 <_close_r+0x1c>
    2202:	602b      	str	r3, [r5, #0]
    2204:	bd70      	pop	{r4, r5, r6, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	20000178 	.word	0x20000178

0000220c <_fstat_r>:
    220c:	2300      	movs	r3, #0
    220e:	b570      	push	{r4, r5, r6, lr}
    2210:	4c06      	ldr	r4, [pc, #24]	; (222c <_fstat_r+0x20>)
    2212:	0005      	movs	r5, r0
    2214:	0008      	movs	r0, r1
    2216:	0011      	movs	r1, r2
    2218:	6023      	str	r3, [r4, #0]
    221a:	f7ff f9e2 	bl	15e2 <_fstat>
    221e:	1c43      	adds	r3, r0, #1
    2220:	d103      	bne.n	222a <_fstat_r+0x1e>
    2222:	6823      	ldr	r3, [r4, #0]
    2224:	2b00      	cmp	r3, #0
    2226:	d000      	beq.n	222a <_fstat_r+0x1e>
    2228:	602b      	str	r3, [r5, #0]
    222a:	bd70      	pop	{r4, r5, r6, pc}
    222c:	20000178 	.word	0x20000178

00002230 <_isatty_r>:
    2230:	2300      	movs	r3, #0
    2232:	b570      	push	{r4, r5, r6, lr}
    2234:	4c06      	ldr	r4, [pc, #24]	; (2250 <_isatty_r+0x20>)
    2236:	0005      	movs	r5, r0
    2238:	0008      	movs	r0, r1
    223a:	6023      	str	r3, [r4, #0]
    223c:	f7ff f9d6 	bl	15ec <_isatty>
    2240:	1c43      	adds	r3, r0, #1
    2242:	d103      	bne.n	224c <_isatty_r+0x1c>
    2244:	6823      	ldr	r3, [r4, #0]
    2246:	2b00      	cmp	r3, #0
    2248:	d000      	beq.n	224c <_isatty_r+0x1c>
    224a:	602b      	str	r3, [r5, #0]
    224c:	bd70      	pop	{r4, r5, r6, pc}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	20000178 	.word	0x20000178

00002254 <_lseek_r>:
    2254:	b570      	push	{r4, r5, r6, lr}
    2256:	0005      	movs	r5, r0
    2258:	0008      	movs	r0, r1
    225a:	0011      	movs	r1, r2
    225c:	2200      	movs	r2, #0
    225e:	4c06      	ldr	r4, [pc, #24]	; (2278 <_lseek_r+0x24>)
    2260:	6022      	str	r2, [r4, #0]
    2262:	001a      	movs	r2, r3
    2264:	f7ff f9c4 	bl	15f0 <_lseek>
    2268:	1c43      	adds	r3, r0, #1
    226a:	d103      	bne.n	2274 <_lseek_r+0x20>
    226c:	6823      	ldr	r3, [r4, #0]
    226e:	2b00      	cmp	r3, #0
    2270:	d000      	beq.n	2274 <_lseek_r+0x20>
    2272:	602b      	str	r3, [r5, #0]
    2274:	bd70      	pop	{r4, r5, r6, pc}
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	20000178 	.word	0x20000178

0000227c <__malloc_lock>:
    227c:	4770      	bx	lr

0000227e <__malloc_unlock>:
    227e:	4770      	bx	lr

00002280 <_read_r>:
    2280:	b570      	push	{r4, r5, r6, lr}
    2282:	0005      	movs	r5, r0
    2284:	0008      	movs	r0, r1
    2286:	0011      	movs	r1, r2
    2288:	2200      	movs	r2, #0
    228a:	4c06      	ldr	r4, [pc, #24]	; (22a4 <_read_r+0x24>)
    228c:	6022      	str	r2, [r4, #0]
    228e:	001a      	movs	r2, r3
    2290:	f7fd ffe4 	bl	25c <_read>
    2294:	1c43      	adds	r3, r0, #1
    2296:	d103      	bne.n	22a0 <_read_r+0x20>
    2298:	6823      	ldr	r3, [r4, #0]
    229a:	2b00      	cmp	r3, #0
    229c:	d000      	beq.n	22a0 <_read_r+0x20>
    229e:	602b      	str	r3, [r5, #0]
    22a0:	bd70      	pop	{r4, r5, r6, pc}
    22a2:	46c0      	nop			; (mov r8, r8)
    22a4:	20000178 	.word	0x20000178
    22a8:	42000800 	.word	0x42000800
    22ac:	42000c00 	.word	0x42000c00
    22b0:	42001000 	.word	0x42001000
    22b4:	42001400 	.word	0x42001400
    22b8:	42001800 	.word	0x42001800
    22bc:	42001c00 	.word	0x42001c00
    22c0:	00000f42 	.word	0x00000f42
    22c4:	00000f3e 	.word	0x00000f3e
    22c8:	00000f3e 	.word	0x00000f3e
    22cc:	00000fa4 	.word	0x00000fa4
    22d0:	00000fa4 	.word	0x00000fa4
    22d4:	00000f56 	.word	0x00000f56
    22d8:	00000f48 	.word	0x00000f48
    22dc:	00000f5c 	.word	0x00000f5c
    22e0:	00000f92 	.word	0x00000f92
    22e4:	0000102c 	.word	0x0000102c
    22e8:	0000100c 	.word	0x0000100c
    22ec:	0000100c 	.word	0x0000100c
    22f0:	00001098 	.word	0x00001098
    22f4:	0000101e 	.word	0x0000101e
    22f8:	0000103a 	.word	0x0000103a
    22fc:	00001010 	.word	0x00001010
    2300:	00001048 	.word	0x00001048
    2304:	00001088 	.word	0x00001088
    2308:	6c6c6548 	.word	0x6c6c6548
    230c:	6f57206f 	.word	0x6f57206f
    2310:	21646c72 	.word	0x21646c72
    2314:	0000000d 	.word	0x0000000d

00002318 <_global_impure_ptr>:
    2318:	20000008                                ... 

0000231c <__sf_fake_stderr>:
	...

0000233c <__sf_fake_stdin>:
	...

0000235c <__sf_fake_stdout>:
	...

0000237c <_init>:
    237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2382:	bc08      	pop	{r3}
    2384:	469e      	mov	lr, r3
    2386:	4770      	bx	lr

00002388 <__init_array_start>:
    2388:	000000dd 	.word	0x000000dd

0000238c <_fini>:
    238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2392:	bc08      	pop	{r3}
    2394:	469e      	mov	lr, r3
    2396:	4770      	bx	lr

00002398 <__fini_array_start>:
    2398:	000000b5 	.word	0x000000b5
